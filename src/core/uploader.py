"""
Module for uploading videos to Telegram
"""

import os
import time
import logging
import threading
import traceback
from queue import Queue
from datetime import datetime
from tkinter import messagebox

logger = logging.getLogger("Uploader")

class Uploader:
    """
    Class for uploading videos to Telegram
    """
    
    def __init__(self, app):
        """
        Initialize uploader
        
        Args:
            app: TelegramUploaderApp instance
        """
        self.app = app
        self.telegram_api = app.telegram_api
        self.telethon_uploader = app.telethon_uploader
        self.is_uploading = False
        self.should_stop = False
        self.current_file = None
        self.current_thread = None
        self.history = app.upload_history
    
    def upload_videos(self, videos, chat_id=None, caption_template=None, progress_callback=None):
        """
        Upload multiple videos
        
        Args:
            videos (list): List of video paths
            chat_id (str/int): Telegram chat/channel ID
            caption_template (str): Caption template for videos
            progress_callback (function): Callback for upload progress
            
        Returns:
            bool: True if all uploads successful
        """
        if not videos:
            logger.warning("Kh√¥ng c√≥ video n√†o ƒë·ªÉ t·∫£i l√™n")
            return False
            
        # Use default chat ID if not provided
        if not chat_id:
            chat_id = self.app.config['TELEGRAM']['chat_id']
            
        if not chat_id:
            logger.error("Ch∆∞a c·∫•u h√¨nh Chat ID")
            return False
            
        # Start upload
        self.is_uploading = True
        self.should_stop = False
        total_videos = len(videos)
        successful_uploads = 0
        
        # Update UI
        if hasattr(self.app, 'update_status'):
            self.app.update_status(f"ƒêang t·∫£i l√™n {total_videos} video...")
        
        # Report file count
        logger.info(f"B·∫Øt ƒë·∫ßu t·∫£i l√™n {total_videos} video l√™n Telegram")
        
        # TH√äM: Ki·ªÉm tra use_telethon ngay t·ª´ ƒë·∫ßu
        use_telethon = self.app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
        logger.info(f"UPLOADER.upload_videos: use_telethon = {use_telethon}")
        
        # TH√äM: Ki·ªÉm tra k·∫øt n·ªëi Telethon t·ª´ s·ªõm n·∫øu use_telethon = true
        if use_telethon:
            telethon_connected = getattr(self.telethon_uploader, 'connected', False)
            logger.info(f"UPLOADER.upload_videos: Tr·∫°ng th√°i k·∫øt n·ªëi Telethon ban ƒë·∫ßu = {telethon_connected}")
            
            # N·∫øu ch∆∞a k·∫øt n·ªëi, th·ª≠ k·∫øt n·ªëi
            if not telethon_connected:
                try:
                    # Ki·ªÉm tra k·∫øt n·ªëi
                    is_connected = self.telethon_uploader.is_connected()
                    if is_connected:
                        self.telethon_uploader.connected = True
                        telethon_connected = True
                        logger.info("UPLOADER.upload_videos: ƒê√£ t·ª± ƒë·ªông thi·∫øt l·∫≠p k·∫øt n·ªëi Telethon = True")
                    else:
                        # Th√¥ng b√°o l·ªói k·∫øt n·ªëi
                        logger.error("UPLOADER.upload_videos: Telethon ch∆∞a k·∫øt n·ªëi")
                        messagebox.showwarning(
                            "C·∫£nh b√°o Telethon",
                            "B·∫°n ƒë√£ b·∫≠t 'S·ª≠ d·ª•ng Telethon API' nh∆∞ng ch∆∞a ƒëƒÉng nh·∫≠p Telethon. "
                            "Video l·ªõn h∆°n 50MB s·∫Ω kh√¥ng ƒë∆∞·ª£c t·∫£i l√™n.\n\n"
                            "Vui l√≤ng v√†o tab C√†i ƒë·∫∑t > Telethon API ƒë·ªÉ ƒëƒÉng nh·∫≠p."
                        )
                except Exception as e:
                    logger.error(f"UPLOADER.upload_videos: L·ªói ki·ªÉm tra k·∫øt n·ªëi Telethon: {str(e)}")
        
        try:
            # Process each video
            for index, video_path in enumerate(videos):
                # Check if upload should stop
                if self.should_stop:
                    logger.info("ƒê√£ d·ª´ng t·∫£i l√™n theo y√™u c·∫ßu")
                    break
                
                # Update current file
                self.current_file = video_path
                video_name = os.path.basename(video_path)
                
                # Skip if file doesn't exist
                if not os.path.exists(video_path) or not os.path.isfile(video_path):
                    logger.warning(f"File kh√¥ng t·ªìn t·∫°i: {video_path}")
                    continue
                
                # TH√äM: Ki·ªÉm tra k√≠ch th∆∞·ªõc video
                video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
                logger.info(f"UPLOADER.upload_videos: Video {video_name}: {video_size_mb:.2f} MB")
                
                # TH√äM: Ki·ªÉm tra use_telethon + k√≠ch th∆∞·ªõc l·ªõn t·ª´ s·ªõm
                if use_telethon and video_size_mb > 50 and not telethon_connected:
                    logger.error(f"UPLOADER.upload_videos: B·ªè qua video l·ªõn {video_name} v√¨ Telethon ch∆∞a k·∫øt n·ªëi")
                    messagebox.showerror(
                        "L·ªói t·∫£i l√™n",
                        f"Video '{video_name}' c√≥ k√≠ch th∆∞·ªõc {video_size_mb:.2f} MB v∆∞·ª£t qu√° gi·ªõi h·∫°n 50MB.\n\n"
                        f"V√¨ b·∫°n ƒë√£ b·∫≠t 'S·ª≠ d·ª•ng Telethon API' nh∆∞ng ch∆∞a ƒëƒÉng nh·∫≠p Telethon, "
                        f"·ª©ng d·ª•ng kh√¥ng th·ªÉ t·∫£i l√™n video n√†y.\n\n"
                        f"Vui l√≤ng v√†o tab C√†i ƒë·∫∑t > Telethon API ƒë·ªÉ ƒëƒÉng nh·∫≠p."
                    )
                    continue
                
                # Update progress and status
                if progress_callback:
                    overall_progress = int(index * 100 / total_videos)
                    progress_callback(overall_progress)
                
                if hasattr(self.app, 'update_status'):
                    self.app.update_status(f"ƒêang t·∫£i l√™n {index + 1}/{total_videos}: {video_name}")
                
                # Prepare caption
                if caption_template:
                    video_caption = self._format_caption(caption_template, video_path)
                else:
                    # Default caption with file name and timestamp
                    video_caption = f"üìπ {video_name}\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
                # Upload video with progress tracking
                def file_progress_callback(percent):
                    if progress_callback:
                        # Calculate overall progress (this file's progress weighted by position in queue)
                        file_weight = 1.0 / total_videos
                        overall_progress = int(index * 100 / total_videos + percent * file_weight)
                        progress_callback(overall_progress)
                
                # Send video
                logger.info(f"T·∫£i l√™n {index + 1}/{total_videos}: {video_name}")
                success = self._send_video(video_path, chat_id, video_caption)
                
                if success:
                    successful_uploads += 1
                    logger.info(f"‚úÖ ƒê√£ t·∫£i l√™n th√†nh c√¥ng: {video_name}")
                    
                    # Add to history
                    self.history.add_upload(
                        video_path,
                        chat_id,
                        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        True
                    )
                else:
                    logger.error(f"‚ùå T·∫£i l√™n th·∫•t b·∫°i: {video_name}")
                    
                    # Add to history
                    self.history.add_upload(
                        video_path,
                        chat_id,
                        datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                        False
                    )
                
                # Apply upload delay if configured
                if index < total_videos - 1:
                    delay = int(self.app.config['SETTINGS'].get('delay_between_uploads', '5'))
                    if delay > 0:
                        logger.info(f"ƒê·ª£i {delay} gi√¢y tr∆∞·ªõc khi t·∫£i video ti·∫øp theo...")
                        if hasattr(self.app, 'update_status'):
                            self.app.update_status(f"ƒê·ª£i {delay} gi√¢y tr∆∞·ªõc khi t·∫£i video ti·∫øp theo...")
                        
                        # Wait with check for stop request
                        for i in range(delay):
                            if self.should_stop:
                                break
                            time.sleep(1)
            
            # Complete
            logger.info(f"ƒê√£ t·∫£i l√™n {successful_uploads}/{total_videos} video")
            
            # Update progress and status
            if progress_callback:
                progress_callback(100)
                
            if hasattr(self.app, 'update_status'):
                self.app.update_status(f"ƒê√£ t·∫£i l√™n {successful_uploads}/{total_videos} video")
            
            return successful_uploads == total_videos
            
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i l√™n video: {str(e)}")
            logger.error(traceback.format_exc())
            return False
            
        finally:
            # Reset state
            self.is_uploading = False
            self.current_file = None
    
    def upload_video(self, video_path, chat_id=None, caption=None, progress_callback=None):
        """
        Upload a single video
        
        Args:
            video_path (str): Path to video file
            chat_id (str/int): Telegram chat/channel ID
            caption (str): Caption for the video
            progress_callback (function): Callback for upload progress
            
        Returns:
            bool: True if upload successful
        """
        # TH√äM: Ki·ªÉm tra nhanh video size v√† use_telethon
        try:
            use_telethon = self.app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
            video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
            
            # Log th√¥ng tin
            logger.info(f"UPLOADER.upload_video: {os.path.basename(video_path)}, size = {video_size_mb:.2f} MB, use_telethon = {use_telethon}")
            
            # Ki·ªÉm tra n·∫øu video l·ªõn v√† use_telethon = true nh∆∞ng ch∆∞a ƒëƒÉng nh·∫≠p Telethon
            if use_telethon and video_size_mb > 50:
                telethon_connected = getattr(self.telethon_uploader, 'connected', False)
                if not telethon_connected:
                    try:
                        # Th·ª≠ ki·ªÉm tra k·∫øt n·ªëi m·ªôt l·∫ßn n·ªØa
                        is_connected = self.telethon_uploader.is_connected()
                        if is_connected:
                            self.telethon_uploader.connected = True
                            telethon_connected = True
                            logger.info("UPLOADER.upload_video: ƒê√£ t·ª± ƒë·ªông thi·∫øt l·∫≠p connected = True")
                    except:
                        pass
                    
                    # N·∫øu v·∫´n ch∆∞a k·∫øt n·ªëi, th√¥ng b√°o l·ªói
                    if not telethon_connected:
                        logger.error(f"UPLOADER.upload_video: Video l·ªõn {video_size_mb:.2f} MB + use_telethon = true nh∆∞ng ch∆∞a ƒëƒÉng nh·∫≠p Telethon")
                        messagebox.showerror(
                            "L·ªói t·∫£i l√™n",
                            f"Video '{os.path.basename(video_path)}' c√≥ k√≠ch th∆∞·ªõc {video_size_mb:.2f} MB v∆∞·ª£t qu√° gi·ªõi h·∫°n 50MB.\n\n"
                            f"V√¨ b·∫°n ƒë√£ b·∫≠t 'S·ª≠ d·ª•ng Telethon API' nh∆∞ng ch∆∞a ƒëƒÉng nh·∫≠p Telethon, "
                            f"·ª©ng d·ª•ng kh√¥ng th·ªÉ t·∫£i l√™n video n√†y.\n\n"
                            f"Vui l√≤ng v√†o tab C√†i ƒë·∫∑t > Telethon API ƒë·ªÉ ƒëƒÉng nh·∫≠p."
                        )
                        return False
        except Exception as e:
            logger.error(f"UPLOADER.upload_video: L·ªói ki·ªÉm tra ban ƒë·∫ßu: {str(e)}")
        
        # G·ªçi ph∆∞∆°ng th·ª©c upload_videos ƒë·ªÉ t·∫£i l√™n
        return self.upload_videos([video_path], chat_id, caption, progress_callback)
    
    def _send_video(self, video_path, chat_id, caption=None, force_telethon=False):
        """
        G·ª≠i video l√™n Telegram - ∆ØU TI√äN TELETHON cho video l·ªõn khi use_telethon=True
        
        Args:
            video_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn video
            chat_id (str/int): Chat ID ƒë·ªÉ g·ª≠i video
            caption (str): Ch√∫ th√≠ch cho video
            force_telethon (bool): B·∫Øt bu·ªôc s·ª≠ d·ª•ng Telethon API
                
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        # Ki·ªÉm tra file t·ªìn t·∫°i
        if not os.path.exists(video_path) or not os.path.isfile(video_path):
            logger.error(f"UPLOADER: [UPLOADER-A] File video kh√¥ng t·ªìn t·∫°i: {video_path}")
            return False
        
        # L·∫•y k√≠ch th∆∞·ªõc video
        video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
        video_name = os.path.basename(video_path)
        
        # Th√¥ng b√°o tr·∫°ng th√°i
        logger.info(f"UPLOADER: [UPLOADER-B] ƒêang g·ª≠i video {video_name} ({video_size_mb:.2f} MB), force_telethon={force_telethon}")
        
        # B∆Ø·ªöC 1: KI·ªÇM TRA NGAY use_telethon, force_telethon V√Ä K√çCH TH∆Ø·ªöC VIDEO
        try:
            # Ki·ªÉm tra xem self.app c√≥ t·ªìn t·∫°i kh√¥ng
            if not hasattr(self, 'app'):
                logger.error(f"UPLOADER: [UPLOADER-C] L·ªói nghi√™m tr·ªçng - kh√¥ng t√¨m th·∫•y self.app")
                return False
            
            # Ki·ªÉm tra xem app.config c√≥ t·ªìn t·∫°i kh√¥ng
            if not hasattr(self.app, 'config'):
                logger.error(f"UPLOADER: [UPLOADER-D] L·ªói nghi√™m tr·ªçng - kh√¥ng t√¨m th·∫•y self.app.config")
                return False
            
            # L·∫•y tr·∫°ng th√°i use_telethon t·ª´ c·∫•u h√¨nh
            use_telethon = self.app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
            logger.info(f"UPLOADER: [UPLOADER-E] Ki·ªÉm tra ban ƒë·∫ßu - use_telethon={use_telethon}, force_telethon={force_telethon}, k√≠ch th∆∞·ªõc={video_size_mb:.2f} MB")
            
            # Ki·ªÉm tra telethon_uploader t·ªìn t·∫°i kh√¥ng
            has_telethon = hasattr(self, 'telethon_uploader')
            logger.info(f"UPLOADER: [UPLOADER-F] Ki·ªÉm tra telethon_uploader t·ªìn t·∫°i: {has_telethon}")
            
            # VIDEO L·ªöN + USE_TELETHON = TRUE HO·∫∂C FORCE_TELETHON = TRUE -> LU√îN D√ôNG TELETHON
            if (use_telethon and video_size_mb > 50) or force_telethon:
                logger.info(f"UPLOADER: [UPLOADER-G] ‚úÖ ƒêI·ªÄU KI·ªÜN K√çCH HO·∫†T TELETHON: use_telethon={use_telethon}, force_telethon={force_telethon}, video size={video_size_mb:.2f} MB")
                
                # Ki·ªÉm tra telethon_uploader
                if not has_telethon:
                    logger.error(f"UPLOADER: [UPLOADER-H] ‚ùå L·ªói nghi√™m tr·ªçng - kh√¥ng t√¨m th·∫•y self.telethon_uploader")
                    from tkinter import messagebox
                    messagebox.showerror(
                        "L·ªói t·∫£i l√™n",
                        f"Kh√¥ng th·ªÉ t·∫£i l√™n video l·ªõn qua Telethon API do thi·∫øu module telethon_uploader.\n\n"
                        f"Vui l√≤ng li√™n h·ªá nh√† ph√°t tri·ªÉn."
                    )
                    return False
                
                # L·∫•y telethon_uploader
                telethon_uploader = self.telethon_uploader
                
                # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                self.update_progress(20, "ƒêang t·∫£i l√™n qua Telethon API...")
                
                # Callback ti·∫øn tr√¨nh
                def progress_callback(percent):
                    self.update_progress(percent, f"ƒêang t·∫£i l√™n qua Telethon... {percent}%")
                
                # G·ª¨I VIDEO QUA TELETHON
                try:
                    # Log vi·ªác s·ª≠ d·ª•ng Telethon
                    logger.info(f"UPLOADER: [UPLOADER-I] üöÄ C∆Ø·ª†NG BU·ªòC s·ª≠ d·ª•ng Telethon API cho video: {video_name} ({video_size_mb:.2f} MB)")
                    
                    # QUAN TR·ªåNG: Th√™m force=True ƒë·ªÉ b·ªè qua m·ªçi ki·ªÉm tra k·∫øt n·ªëi
                    result = telethon_uploader.upload_video(
                        chat_id, 
                        video_path,
                        caption=caption,
                        progress_callback=progress_callback,
                        force=True  # B·ªè qua ki·ªÉm tra k·∫øt n·ªëi
                    )
                    
                    # Ki·ªÉm tra k·∫øt qu·∫£
                    if result:
                        logger.info(f"UPLOADER: [UPLOADER-J] ‚úÖ T·∫£i l√™n th√†nh c√¥ng qua Telethon API")
                        self.update_progress(100, "T·∫£i l√™n ho√†n t·∫•t!")
                        return True
                    else:
                        # L·ªói khi t·∫£i l√™n qua Telethon
                        logger.error(f"UPLOADER: [UPLOADER-K] ‚ùå T·∫£i l√™n th·∫•t b·∫°i qua Telethon API m·∫∑c d√π ƒë√£ force=True")
                        
                        # Th√¥ng b√°o l·ªói nh∆∞ng KH√îNG fallback sang chia nh·ªè
                        from tkinter import messagebox
                        messagebox.showerror(
                            "L·ªói t·∫£i l√™n",
                            f"Kh√¥ng th·ªÉ t·∫£i l√™n video '{video_name}' ({video_size_mb:.2f} MB) qua Telethon API.\n\n"
                            f"Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet, c·∫•u h√¨nh Telethon API v√† th·ª≠ l·∫°i sau."
                        )
                        
                        self.update_progress(0, "L·ªói t·∫£i l√™n qua Telethon")
                        return False
                except Exception as e:
                    # X·ª≠ l√Ω l·ªói khi t·∫£i l√™n
                    logger.error(f"UPLOADER: [UPLOADER-L] ‚ùå L·ªói nghi√™m tr·ªçng khi t·∫£i l√™n qua Telethon: {str(e)}")
                    import traceback
                    logger.error(f"UPLOADER: [STACK TRACE] {traceback.format_exc()}")
                    
                    # Th√¥ng b√°o l·ªói nh∆∞ng KH√îNG fallback sang chia nh·ªè
                    from tkinter import messagebox
                    messagebox.showerror(
                        "L·ªói t·∫£i l√™n",
                        f"L·ªói khi t·∫£i l√™n qua Telethon API: {str(e)}\n\n"
                        f"Video l·ªõn h∆°n 50MB s·∫Ω kh√¥ng ƒë∆∞·ª£c chia nh·ªè khi b·∫≠t 'S·ª≠ d·ª•ng Telethon API'.\n"
                        f"Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi v√† th·ª≠ l·∫°i."
                    )
                    
                    self.update_progress(0, f"L·ªói Telethon: {str(e)}")
                    return False
        except Exception as e:
            logger.error(f"UPLOADER: [UPLOADER-M] ‚ùå L·ªói khi ki·ªÉm tra use_telethon ban ƒë·∫ßu: {str(e)}")
            import traceback
            logger.error(f"UPLOADER: [STACK TRACE] {traceback.format_exc()}")
        
        # B∆Ø·ªöC 2: N·∫æU ƒê·∫æN ƒê∆Ø·ª¢C ƒê√ÇY -> use_telethon=False HO·∫∂C video nh·ªè h∆°n 50MB v√† kh√¥ng force_telethon
        # Ki·ªÉm tra Telethon k·∫øt n·ªëi (∆∞u ti√™n n·∫øu ƒë√£ k·∫øt n·ªëi)
        try:
            # L·∫•y tr·∫°ng th√°i use_telethon t·ª´ c·∫•u h√¨nh
            use_telethon = self.app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
            logger.info(f"UPLOADER: [UPLOADER-N] Ki·ªÉm tra th∆∞·ªùng - use_telethon = {use_telethon}")
            
            # N·∫æU USE_TELETHON = TRUE: ∆Øu ti√™n d√πng Telethon n·∫øu ƒë√£ k·∫øt n·ªëi
            if use_telethon and not force_telethon:
                # Th√¥ng b√°o ∆∞u ti√™n Telethon
                logger.info(f"UPLOADER: [UPLOADER-O] ƒê√£ b·∫≠t use_telethon, ∆∞u ti√™n s·ª≠ d·ª•ng Telethon API n·∫øu ƒë√£ k·∫øt n·ªëi")
                
                # L·∫•y telethon_uploader
                telethon_uploader = self.telethon_uploader
                
                # Ki·ªÉm tra k·∫øt n·ªëi Telethon th·ª±c t·∫ø
                try:
                    # ƒê·∫∑t k·∫øt n·ªëi = True n·∫øu ƒë√£ c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß
                    telethon_connected = True
                    logger.info(f"UPLOADER: [UPLOADER-P] ƒê·∫∑t tr·∫°ng th√°i k·∫øt n·ªëi Telethon = True v√¨ ƒë√£ ∆∞u ti√™n")
                except Exception as e:
                    logger.error(f"UPLOADER: [UPLOADER-Q] L·ªói khi ƒë·∫∑t k·∫øt n·ªëi Telethon: {str(e)}")
                    telethon_connected = False
                
                # N·∫øu k·∫øt n·ªëi Telethon OK, th·ª≠ t·∫£i l√™n
                if telethon_connected:
                    # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                    self.update_progress(20, "ƒêang t·∫£i l√™n qua Telethon...")
                    
                    # Callback ti·∫øn tr√¨nh
                    def progress_callback(percent):
                        self.update_progress(percent, f"ƒêang t·∫£i l√™n qua Telethon... {percent}%")
                    
                    # T·∫£i l√™n qua Telethon
                    try:
                        # Log vi·ªác s·ª≠ d·ª•ng Telethon
                        logger.info(f"UPLOADER: [UPLOADER-R] ƒêang s·ª≠ d·ª•ng Telethon API ƒë·ªÉ t·∫£i l√™n {video_name} ({video_size_mb:.2f} MB)")
                        
                        # T·∫£i l√™n v·ªõi force=True
                        result = telethon_uploader.upload_video(
                            chat_id, 
                            video_path,
                            caption=caption,
                            progress_callback=progress_callback,
                            force=True  # B·ªè qua ki·ªÉm tra k·∫øt n·ªëi
                        )
                        
                        # Ki·ªÉm tra k·∫øt qu·∫£
                        if result:
                            logger.info(f"UPLOADER: [UPLOADER-S] ‚úÖ T·∫£i l√™n th√†nh c√¥ng qua Telethon API")
                            self.update_progress(100, "T·∫£i l√™n ho√†n t·∫•t!")
                            return True
                        else:
                            # L·ªói khi t·∫£i l√™n qua Telethon
                            logger.error(f"UPLOADER: [UPLOADER-T] ‚ùå T·∫£i l√™n th·∫•t b·∫°i qua Telethon API")
                    except Exception as e:
                        # X·ª≠ l√Ω l·ªói khi t·∫£i l√™n
                        logger.error(f"UPLOADER: [UPLOADER-U] ‚ùå L·ªói khi t·∫£i l√™n qua Telethon: {str(e)}")
                        import traceback
                        logger.error(f"UPLOADER: [STACK TRACE] {traceback.format_exc()}")
                    
                    # D√π c√≥ l·ªói, video nh·ªè v·∫´n ti·∫øp t·ª•c xu·ªëng d∆∞·ªõi ƒë·ªÉ th·ª≠ d√πng Telegram API
                    logger.info(f"UPLOADER: [UPLOADER-V] Video nh·ªè, ti·∫øp t·ª•c xu·ªëng d∆∞·ªõi ƒë·ªÉ d√πng Telegram API")
                else:
                    # Telethon ch∆∞a k·∫øt n·ªëi - c≈©ng kh√¥ng quan tr·ªçng
                    logger.warning(f"UPLOADER: [UPLOADER-W] Telethon ch∆∞a k·∫øt n·ªëi, nh∆∞ng ti·∫øp t·ª•c xu·ªëng d∆∞·ªõi v√¨ video nh·ªè")
        except Exception as e:
            logger.error(f"UPLOADER: [UPLOADER-X] ‚ùå L·ªói khi ki·ªÉm tra Telethon th∆∞·ªùng: {str(e)}")
            import traceback
            logger.error(f"UPLOADER: [STACK TRACE] {traceback.format_exc()}")
        
        # B∆Ø·ªöC 3: D√ôNG TELEGRAM API - d√†nh cho video nh·ªè ho·∫∑c use_telethon = false
        try:
            # C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
            self.update_progress(10, "ƒêang chu·∫©n b·ªã t·∫£i l√™n qua Telegram API...")
            
            # Ki·ªÉm tra l·∫°i use_telethon + video size - ƒë·∫£m b·∫£o an to√†n
            try:
                use_telethon = self.app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
                if use_telethon and video_size_mb > 50:
                    logger.error(f"UPLOADER: [UPLOADER-Y] ‚ö†Ô∏è VIDEO L·ªöN + USE_TELETHON=TRUE => KH√îNG ƒê∆Ø·ª¢C D√ôNG TELEGRAM API")
                    from tkinter import messagebox
                    messagebox.showerror(
                        "L·ªói t·∫£i l√™n",
                        f"Video '{video_name}' c√≥ k√≠ch th∆∞·ªõc {video_size_mb:.2f} MB v∆∞·ª£t qu√° gi·ªõi h·∫°n 50MB.\n\n"
                        f"Khi b·∫≠t 'S·ª≠ d·ª•ng Telethon API', ·ª©ng d·ª•ng s·∫Ω kh√¥ng chia nh·ªè video.\n\n"
                        f"ƒê√£ th·ª≠ d√πng Telethon nh∆∞ng g·∫∑p l·ªói. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh v√† th·ª≠ l·∫°i."
                    )
                    self.update_progress(0, "L·ªói: Kh√¥ng th·ªÉ g·ª≠i qua Telegram API khi b·∫≠t Telethon")
                    return False
            except Exception as e:
                logger.error(f"UPLOADER: [UPLOADER-Z] ‚ùå L·ªói ki·ªÉm tra cu·ªëi c√πng: {str(e)}")
                import traceback
                logger.error(f"UPLOADER: [STACK TRACE] {traceback.format_exc()}")
            
            # S·ª≠ d·ª•ng callback ti·∫øn ƒë·ªô
            def progress_callback(percent):
                self.update_progress(percent, f"ƒêang t·∫£i l√™n qua Telegram API... {percent}%")
            
            # G·ª≠i video qua Telegram API
            logger.info(f"UPLOADER: [UPLOADER-AA] T·∫£i l√™n video qua Telegram API: {video_name}")
            
            # S·ª≠ d·ª•ng telegram_api.send_video
            result = self.telegram_api.send_video(
                chat_id=chat_id,
                video_path=video_path,
                caption=caption,
                disable_notification=False,
                progress_callback=progress_callback
            )
            
            # Ho√†n t·∫•t
            if result:
                logger.info(f"UPLOADER: [UPLOADER-AB] ‚úÖ T·∫£i l√™n th√†nh c√¥ng qua Telegram API")
                self.update_progress(100, "T·∫£i l√™n ho√†n t·∫•t!")
            else:
                logger.error(f"UPLOADER: [UPLOADER-AC] ‚ùå T·∫£i l√™n th·∫•t b·∫°i qua Telegram API")
                self.update_progress(0, "T·∫£i l√™n th·∫•t b·∫°i!")
                
            return result
            
        except Exception as e:
            logger.error(f"UPLOADER: [UPLOADER-AD] ‚ùå L·ªói khi t·∫£i l√™n qua Telegram API: {str(e)}")
            import traceback
            logger.error(f"UPLOADER: [STACK TRACE] {traceback.format_exc()}")
            self.update_progress(0, f"L·ªói: {str(e)}")
            return False
    def start_upload_thread(self, videos, chat_id=None, caption_template=None, progress_callback=None):
        """
        Start upload in a separate thread
        
        Args:
            videos (list): List of video paths
            chat_id (str/int): Telegram chat/channel ID
            caption_template (str): Caption template for videos
            progress_callback (function): Callback for upload progress
            
        Returns:
            bool: True if upload thread started successfully
        """
        if self.is_uploading:
            logger.warning("ƒêang c√≥ qu√° tr√¨nh t·∫£i l√™n kh√°c")
            return False
        
        # TH√äM: Ki·ªÉm tra video l·ªõn + use_telethon
        try:
            use_telethon = self.app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
            if use_telethon:
                # Ki·ªÉm tra k·∫øt n·ªëi Telethon tr∆∞·ªõc
                telethon_connected = getattr(self.telethon_uploader, 'connected', False)
                try:
                    if not telethon_connected:
                        is_connected = self.telethon_uploader.is_connected()
                        if is_connected:
                            self.telethon_uploader.connected = True
                            telethon_connected = True
                except:
                    pass
                
                # Ki·ªÉm tra c√°c video l·ªõn
                large_videos = []
                for video_path in videos:
                    if os.path.exists(video_path) and os.path.isfile(video_path):
                        video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
                        if video_size_mb > 50:
                            large_videos.append((os.path.basename(video_path), video_size_mb))
                
                # N·∫øu c√≥ video l·ªõn v√† Telethon ch∆∞a k·∫øt n·ªëi, th√¥ng b√°o l·ªói
                if large_videos and not telethon_connected:
                    message = "C√°c video sau c√≥ k√≠ch th∆∞·ªõc v∆∞·ª£t qu√° 50MB:\n\n"
                    for name, size in large_videos:
                        message += f"- {name} ({size:.2f} MB)\n"
                    message += "\nV√¨ b·∫°n ƒë√£ b·∫≠t 'S·ª≠ d·ª•ng Telethon API' nh∆∞ng ch∆∞a ƒëƒÉng nh·∫≠p Telethon, "
                    message += "·ª©ng d·ª•ng kh√¥ng th·ªÉ t·∫£i l√™n nh·ªØng video n√†y.\n\n"
                    message += "Vui l√≤ng v√†o tab C√†i ƒë·∫∑t > Telethon API ƒë·ªÉ ƒëƒÉng nh·∫≠p."
                    
                    logger.error(f"start_upload_thread: C√≥ {len(large_videos)} video l·ªõn nh∆∞ng Telethon ch∆∞a k·∫øt n·ªëi")
                    messagebox.showerror("L·ªói t·∫£i l√™n", message)
                    
                    # N·∫øu t·∫•t c·∫£ ƒë·ªÅu l√† video l·ªõn, h·ªßy ho√†n to√†n
                    if len(large_videos) == len(videos):
                        return False
                    
                    # N·∫øu c√≥ video nh·ªè, h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng
                    if len(large_videos) < len(videos):
                        answer = messagebox.askyesno(
                            "X√°c nh·∫≠n",
                            f"C√≥ {len(videos) - len(large_videos)} video nh·ªè h∆°n 50MB c√≥ th·ªÉ ƒë∆∞·ª£c t·∫£i l√™n.\n"
                            f"B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫£i l√™n nh·ªØng video nh·ªè n√†y kh√¥ng?"
                        )
                        if not answer:
                            return False
                        
                        # L·ªçc b·ªè c√°c video l·ªõn
                        filtered_videos = []
                        for video_path in videos:
                            if os.path.exists(video_path) and os.path.isfile(video_path):
                                video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
                                if video_size_mb <= 50:
                                    filtered_videos.append(video_path)
                        videos = filtered_videos
        except Exception as e:
            logger.error(f"start_upload_thread: L·ªói ki·ªÉm tra video l·ªõn: {str(e)}")
            
        # Create thread
        self.current_thread = threading.Thread(
            target=self.upload_videos,
            args=(videos, chat_id, caption_template, progress_callback),
            daemon=True
        )
        
        # Start thread
        self.current_thread.start()
        return True
    
    def stop_upload(self):
        """Stop current upload"""
        if self.is_uploading:
            logger.info("ƒêang d·ª´ng t·∫£i l√™n...")
            self.should_stop = True
            return True
        return False
    
    def update_progress(self, percent, status_text=None):
        """
        Update progress in UI
        
        Args:
            percent (int): Progress percentage (0-100)
            status_text (str): Status text to display
        """
        # Update progress UI if available
        if hasattr(self.app, 'update_progress'):
            self.app.update_progress(percent)
            
        # Update status text if available
        if status_text and hasattr(self.app, 'update_status'):
            self.app.update_status(status_text)
    
    def _format_caption(self, template, video_path):
        """
        Format caption template with video information
        
        Args:
            template (str): Caption template
            video_path (str): Path to video file
            
        Returns:
            str: Formatted caption
        """
        # Get video info
        video_name = os.path.basename(video_path)
        video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
        
        # Get current time
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # Replace placeholders
        caption = template.replace('{filename}', video_name)
        caption = caption.replace('{datetime}', current_time)
        caption = caption.replace('{size}', f"{video_size_mb:.2f} MB")
        
        return caption