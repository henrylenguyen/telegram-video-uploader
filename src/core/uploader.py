"""
Module x·ª≠ l√Ω t·∫£i l√™n video th·ªß c√¥ng t·ª´ tab ch√≠nh.
"""
import os
import time
import logging
import threading
import tkinter as tk
from tkinter import messagebox

logger = logging.getLogger("Uploader")

class Uploader:
    """
    X·ª≠ l√Ω vi·ªác t·∫£i l√™n video th·ªß c√¥ng t·ª´ giao di·ªán.
    """
    
    def __init__(self, app):
        """
        Kh·ªüi t·∫°o Uploader.
        
        Args:
            app: ƒê·ªëi t∆∞·ª£ng TelegramUploaderApp
        """
        self.app = app
    
    def start_upload(self, app):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i l√™n video"""
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if app.is_uploading:
            return
        
        # L·∫•y danh s√°ch video ƒë√£ ch·ªçn qua checkboxes
        selected_videos = []
        for item in app.video_tree.get_children():
            check_var = app.video_checkboxes.get(item)
            if check_var and check_var.get():
                # Video ƒë√£ ƒë∆∞·ª£c ch·ªçn qua checkbox
                video_name = app.video_tree.item(item, "values")[1]
                selected_videos.append(video_name)
        
        if not selected_videos:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt video ƒë·ªÉ t·∫£i l√™n!")
            return
        
        # Ki·ªÉm tra c·∫•u h√¨nh Telegram
        bot_token = app.config['TELEGRAM']['bot_token']
        chat_id = app.config['TELEGRAM']['chat_id']
        notification_chat_id = app.config['TELEGRAM']['notification_chat_id']
        
        if not bot_token or not chat_id:
            messagebox.showerror("L·ªói", "Vui l√≤ng c·∫•u h√¨nh Bot Token v√† Chat ID trong tab C√†i ƒë·∫∑t!")
            app.notebook.select(2)  # Chuy·ªÉn ƒë·∫øn tab C√†i ƒë·∫∑t
            return
        
        # K·∫øt n·ªëi l·∫°i v·ªõi Telegram n·∫øu c·∫ßn
        if not app.telegram_api.connected:
            if not app.telegram_api.connect(bot_token):
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Telegram API. Vui l√≤ng ki·ªÉm tra Bot Token v√† k·∫øt n·ªëi internet!")
                return
        
        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i l√™n
        app.is_uploading = True
        app.should_stop = False
        
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i giao di·ªán
        app.upload_btn.config(state=tk.DISABLED)
        app.stop_btn.config(state=tk.NORMAL)
        
        # T·∫°o v√† b·∫Øt ƒë·∫ßu thread t·∫£i l√™n
        folder_path = app.folder_path.get()
        upload_thread = threading.Thread(
            target=self.upload_videos,
            args=(app, folder_path, selected_videos, chat_id, notification_chat_id)
        )
        upload_thread.daemon = True
        upload_thread.start()
    
    def upload_videos(self, app, folder_path, video_files, chat_id, notification_chat_id):
        """
        T·∫£i l√™n c√°c video trong thread ri√™ng
        
        Args:
            app: ƒê·ªëi t∆∞·ª£ng TelegramUploaderApp
            folder_path (str): ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c
            video_files (list): Danh s√°ch t√™n file video
            chat_id (str): ID chat Telegram ƒë√≠ch
            notification_chat_id (str): ID chat ƒë·ªÉ g·ª≠i th√¥ng b√°o
        """
        start_time = time.time()
        
        try:
            # Chu·∫©n b·ªã thanh ti·∫øn tr√¨nh
            total_videos = len(video_files)
            app.progress['maximum'] = total_videos
            app.progress['value'] = 0
            
            # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
            start_message = f"üöÄ B·∫Øt ƒë·∫ßu t·∫£i l√™n {total_videos} video"
            logger.info(start_message)
            
            if notification_chat_id:
                app.telegram_api.send_notification(notification_chat_id, start_message)
            
            # Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn t·∫£i
            delay = int(app.config['SETTINGS'].get('delay_between_uploads', 5))
            
            # Bi·∫øn ƒë·ªÉ theo d√µi k·∫øt qu·∫£ t·∫£i l√™n
            successful_uploads = 0
            failed_uploads = 0
            skipped_uploads = 0
            
            # Ki·ªÉm tra c√†i ƒë·∫∑t Telethon
            use_telethon = app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
            
            # T·∫£i l√™n t·ª´ng video
            for index, video_file in enumerate(video_files):
                if app.should_stop:
                    logger.info("ƒê√£ d·ª´ng qu√° tr√¨nh t·∫£i l√™n theo y√™u c·∫ßu")
                    break
                
                try:
                    # ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß ƒë·∫øn file video
                    video_path = os.path.join(folder_path, video_file)
                    
                    # Ki·ªÉm tra k·∫øt n·ªëi internet
                    if not app.telegram_api.check_internet_connection():
                        error_msg = "M·∫•t k·∫øt n·ªëi internet. ƒêang ch·ªù k·∫øt n·ªëi l·∫°i..."
                        app.status_var.set(error_msg)
                        app.root.update_idletasks()
                        
                        # Ch·ªù k·∫øt n·ªëi internet
                        while not app.telegram_api.check_internet_connection() and not app.should_stop:
                            time.sleep(5)
                            app.status_var.set(f"{error_msg} (ƒë√£ ch·ªù {(time.time() - start_time):.0f}s)")
                            app.root.update_idletasks()
                        
                        if app.should_stop:
                            break
                    
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                    status_text = f"ƒêang t·∫£i l√™n {index + 1}/{total_videos}: {video_file}"
                    app.status_var.set(status_text)
                    app.root.update_idletasks()
                    
                    # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
                    file_size = os.path.getsize(video_path) / (1024 * 1024)  # MB
                    
                    # Quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng Bot API hay Telethon
                    success = False
                    if use_telethon and file_size > 49 and app.telethon_uploader.connected:
                        # S·ª≠ d·ª•ng Telethon cho file l·ªõn
                        logger.info(f"S·ª≠ d·ª•ng Telethon API ƒë·ªÉ t·∫£i l√™n file l·ªõn: {video_file} ({file_size:.2f} MB)")
                        app.status_var.set(f"ƒêang t·∫£i l√™n qua Telethon: {video_file}")
                        app.root.update_idletasks()
                        
                        success = app.telethon_uploader.upload_video(chat_id, video_path)
                    else:
                        # S·ª≠ d·ª•ng Bot API
                        success = app.telegram_api.send_video(chat_id, video_path)
                    
                    if success:
                        log_message = f"‚úÖ ƒê√£ t·∫£i l√™n th√†nh c√¥ng: {video_file}"
                        logger.info(log_message)
                        successful_uploads += 1
                        
                        # Th√™m v√†o l·ªãch s·ª≠
                        video_hash = app.video_analyzer.calculate_video_hash(video_path)
                        if video_hash:
                            file_size = os.path.getsize(video_path)
                            app.upload_history.add_upload(video_hash, video_file, video_path, file_size)
                    else:
                        log_message = f"‚ùå T·∫£i l√™n th·∫•t b·∫°i: {video_file}"
                        logger.error(log_message)
                        failed_uploads += 1
                    
                    # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                    app.progress['value'] = index + 1
                    app.root.update_idletasks()
                    
                    # Ch·ªù gi·ªØa c√°c l·∫ßn t·∫£i l√™n ƒë·ªÉ tr√°nh rate limit
                    if index < total_videos - 1 and not app.should_stop:
                        time.sleep(delay)
                
                except Exception as e:
                    logger.error(f"L·ªói khi t·∫£i l√™n video {video_file}: {str(e)}")
                    failed_uploads += 1
                    
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói
                    app.status_var.set(f"L·ªói khi t·∫£i l√™n {video_file}: {str(e)}")
                    app.root.update_idletasks()
                    time.sleep(2)  # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói trong 2 gi√¢y
            
            # Ho√†n t·∫•t
            if app.should_stop:
                app.status_var.set(f"ƒê√£ d·ª´ng t·∫£i l√™n ({successful_uploads} th√†nh c√¥ng, {failed_uploads} th·∫•t b·∫°i)")
                
                if notification_chat_id:
                    app.telegram_api.send_notification(
                        notification_chat_id, 
                        f"üõë ƒê√£ d·ª´ng t·∫£i l√™n ({successful_uploads} th√†nh c√¥ng, {failed_uploads} th·∫•t b·∫°i)"
                    )
            else:
                app.status_var.set(f"ƒê√£ ho√†n t·∫•t: {successful_uploads} th√†nh c√¥ng, {failed_uploads} th·∫•t b·∫°i")
                
                if notification_chat_id:
                    app.telegram_api.send_notification(
                        notification_chat_id, 
                        f"‚úÖ ƒê√£ ho√†n t·∫•t t·∫£i l√™n: {successful_uploads} th√†nh c√¥ng, {failed_uploads} th·∫•t b·∫°i"
                    )
                
                # L√†m m·ªõi th·ªëng k√™ l·ªãch s·ª≠
                from ui.history_tab import refresh_history_stats
                refresh_history_stats(app)
        
        except Exception as e:
            import traceback
            logger.error(f"L·ªói trong qu√° tr√¨nh t·∫£i l√™n: {str(e)}")
            logger.error(traceback.format_exc())
            app.status_var.set(f"L·ªói: {str(e)}")
        
        finally:
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
            app.is_uploading = False
            
            # C·∫≠p nh·∫≠t giao di·ªán
            app.upload_btn.config(state=tk.NORMAL)
            app.stop_btn.config(state=tk.DISABLED)
    
    def stop_upload(self, app):
        """D·ª´ng qu√° tr√¨nh t·∫£i l√™n"""
        if app.is_uploading:
            app.should_stop = True
            app.status_var.set("ƒêang d·ª´ng t·∫£i l√™n...")
            logger.info("ƒê√£ y√™u c·∫ßu d·ª´ng qu√° tr√¨nh t·∫£i l√™n")