"""
Module x·ª≠ l√Ω t·∫£i l√™n video th·ªß c√¥ng t·ª´ tab ch√≠nh.
"""
import os
import time
import logging
import threading
import tkinter as tk
from tkinter import messagebox

logger = logging.getLogger("Uploader")

class Uploader:
    """
    X·ª≠ l√Ω vi·ªác t·∫£i l√™n video th·ªß c√¥ng t·ª´ giao di·ªán.
    """
    
    def __init__(self, app):
        """
        Kh·ªüi t·∫°o Uploader.
        
        Args:
            app: ƒê·ªëi t∆∞·ª£ng TelegramUploaderApp
        """
        self.app = app
        self.progress_dialog = None
    
    def start_upload(self, app):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i l√™n video"""
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if app.is_uploading:
            return
        
        # L·∫•y danh s√°ch video ƒë√£ ch·ªçn qua checkboxes
        selected_videos = []
        for item in app.video_tree.get_children():
            check_var = app.video_checkboxes.get(item)
            if check_var and check_var.get():
                # Video ƒë√£ ƒë∆∞·ª£c ch·ªçn qua checkbox
                video_name = app.video_tree.item(item, "values")[1]
                selected_videos.append(video_name)
        
        if not selected_videos:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt video ƒë·ªÉ t·∫£i l√™n!")
            return
        
        # Ki·ªÉm tra c·∫•u h√¨nh Telegram
        bot_token = app.config['TELEGRAM']['bot_token']
        chat_id = app.config['TELEGRAM']['chat_id']
        notification_chat_id = app.config['TELEGRAM']['notification_chat_id']
        
        if not bot_token or not chat_id:
            messagebox.showerror("L·ªói", "Vui l√≤ng c·∫•u h√¨nh Bot Token v√† Chat ID trong tab C√†i ƒë·∫∑t!")
            app.notebook.select(2)  # Chuy·ªÉn ƒë·∫øn tab C√†i ƒë·∫∑t
            return
        
        # K·∫øt n·ªëi l·∫°i v·ªõi Telegram n·∫øu c·∫ßn
        if not app.telegram_api.connected:
            if not app.telegram_api.connect(bot_token):
                messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Telegram API. Vui l√≤ng ki·ªÉm tra Bot Token v√† k·∫øt n·ªëi internet!")
                return
        
        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i l√™n
        app.is_uploading = True
        app.should_stop = False
        
        # Kh·ªüi t·∫°o dialog ti·∫øn tr√¨nh
        from utils.upload_progress_dialog import UploadProgressDialog
        self.progress_dialog = UploadProgressDialog(app.root, "ƒêang t·∫£i l√™n video", len(selected_videos))
        
        # C·∫≠p nh·∫≠t t√™n video trong dialog
        for i, video_name in enumerate(selected_videos):
            self.progress_dialog.update_video_name(i, video_name)
        
        # T·∫°o v√† b·∫Øt ƒë·∫ßu thread t·∫£i l√™n
        folder_path = app.folder_path.get()
        upload_thread = threading.Thread(
            target=self.upload_videos,
            args=(app, folder_path, selected_videos, chat_id, notification_chat_id)
        )
        upload_thread.daemon = True
        upload_thread.start()
    
    def upload_videos(self, app, folder_path, video_files, chat_id, notification_chat_id):
        """
        T·∫£i l√™n c√°c video trong thread ri√™ng
        
        Args:
            app: ƒê·ªëi t∆∞·ª£ng TelegramUploaderApp
            folder_path (str): ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c
            video_files (list): Danh s√°ch t√™n file video
            chat_id (str): ID chat Telegram ƒë√≠ch
            notification_chat_id (str): ID chat ƒë·ªÉ g·ª≠i th√¥ng b√°o
        """
        try:
            total_videos = len(video_files)
            successful_uploads = 0
            failed_uploads = 0
            
            # C·∫≠p nh·∫≠t giao di·ªán
            app.status_var.set(f"ƒêang t·∫£i l√™n {total_videos} video...")
            
            # L·∫•y th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn t·∫£i l√™n
            try:
                delay = int(app.config['SETTINGS']['delay_between_uploads'])
            except:
                delay = 5  # M·∫∑c ƒë·ªãnh 5 gi√¢y
            
            # Ki·ªÉm tra n√™n d√πng Telethon hay kh√¥ng
            use_telethon = app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
            
            # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu t·∫£i l√™n
            if notification_chat_id:
                app.telegram_api.send_notification(
                    notification_chat_id, 
                    f"üì§ B·∫Øt ƒë·∫ßu t·∫£i l√™n {total_videos} video"
                )
            
            # T·∫£i l√™n t·ª´ng video
            for index, video_file in enumerate(video_files):
                # Ki·ªÉm tra xem c√≥ y√™u c·∫ßu d·ª´ng kh√¥ng
                if app.should_stop or (self.progress_dialog and self.progress_dialog.is_cancelled):
                    break
                
                # ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
                video_path = os.path.join(folder_path, video_file)
                
                # Ki·ªÉm tra t·ªáp c√≥ t·ªìn t·∫°i kh√¥ng
                if not os.path.exists(video_path) or not os.path.isfile(video_path):
                    logger.error(f"Kh√¥ng t√¨m th·∫•y video: {video_file}")
                    
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i
                    if self.progress_dialog:
                        self.progress_dialog.complete_video(index, success=False)
                    
                    failed_uploads += 1
                    continue
                
                # C·∫≠p nh·∫≠t dialog ti·∫øn tr√¨nh
                if self.progress_dialog:
                    self.progress_dialog.set_current_video(index, video_file)
                
                try:
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                    app.status_var.set(f"ƒêang t·∫£i l√™n video {index + 1}/{total_videos}: {video_file}")
                    
                    # L·∫•y k√≠ch th∆∞·ªõc file ƒë·ªÉ x√°c ƒë·ªãnh ph∆∞∆°ng th·ª©c t·∫£i l√™n
                    file_size = os.path.getsize(video_path) / (1024 * 1024)  # MB
                    
                    # Quy·∫øt ƒë·ªãnh s·ª≠ d·ª•ng Bot API hay Telethon
                    success = False
                    if use_telethon and file_size > 49 and app.telethon_uploader.connected:
                        # S·ª≠ d·ª•ng Telethon cho file l·ªõn
                        logger.info(f"S·ª≠ d·ª•ng Telethon API ƒë·ªÉ t·∫£i l√™n file l·ªõn: {video_file} ({file_size:.2f} MB)")
                        app.status_var.set(f"ƒêang t·∫£i l√™n qua Telethon: {video_file}")
                        
                        # ƒê·ªãnh nghƒ©a callback ti·∫øn tr√¨nh
                        def progress_callback(progress):
                            if self.progress_dialog:
                                self.progress_dialog.update_part_progress(1, progress)
                        
                        # T·∫£i l√™n v·ªõi callback ti·∫øn tr√¨nh
                        success = app.telethon_uploader.upload_video(
                            chat_id, 
                            video_path, 
                            progress_callback=progress_callback
                        )
                    else:
                        # Thi·∫øt l·∫≠p callback ti·∫øn tr√¨nh cho video chia nh·ªè
                        def video_split_callback(part_current, part_total, progress=None):
                            if self.progress_dialog:
                                self.progress_dialog.set_video_parts(part_total)
                                if progress is not None:
                                    self.progress_dialog.update_part_progress(part_current, progress)
                                else:
                                    self.progress_dialog.update_part_progress(part_current, 100)
                        
                        # S·ª≠ d·ª•ng Bot API v·ªõi callback chia nh·ªè
                        success = app.telegram_api.send_video(
                            chat_id, 
                            video_path,
                            split_callback=video_split_callback
                        )
                    
                    if success:
                        log_message = f"‚úÖ ƒê√£ t·∫£i l√™n th√†nh c√¥ng: {video_file}"
                        logger.info(log_message)
                        successful_uploads += 1
                        
                        # C·∫≠p nh·∫≠t dialog
                        if self.progress_dialog:
                            self.progress_dialog.complete_video(index, success=True)
                        
                        # Th√™m v√†o l·ªãch s·ª≠
                        video_hash = app.video_analyzer.calculate_video_hash(video_path)
                        if video_hash:
                            file_size = os.path.getsize(video_path)
                            app.upload_history.add_upload(video_hash, video_file, video_path, file_size)
                    else:
                        log_message = f"‚ùå T·∫£i l√™n th·∫•t b·∫°i: {video_file}"
                        logger.error(log_message)
                        failed_uploads += 1
                        
                        # C·∫≠p nh·∫≠t dialog
                        if self.progress_dialog:
                            self.progress_dialog.complete_video(index, success=False)
                    
                    # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
                    app.progress['value'] = index + 1
                    app.root.update_idletasks()
                    
                    # Ch·ªù gi·ªØa c√°c l·∫ßn t·∫£i l√™n ƒë·ªÉ tr√°nh rate limit
                    if index < total_videos - 1 and not app.should_stop and not (self.progress_dialog and self.progress_dialog.is_cancelled):
                        time.sleep(delay)
                
                except Exception as e:
                    logger.error(f"L·ªói khi t·∫£i l√™n video {video_file}: {str(e)}")
                    failed_uploads += 1
                    
                    # C·∫≠p nh·∫≠t dialog
                    if self.progress_dialog:
                        self.progress_dialog.complete_video(index, success=False)
                    
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói
                    app.status_var.set(f"L·ªói khi t·∫£i l√™n {video_file}: {str(e)}")
                    app.root.update_idletasks()
                    time.sleep(2)  # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói trong 2 gi√¢y
            
            # ƒê√°nh d·∫•u ho√†n t·∫•t cho dialog
            if self.progress_dialog:
                self.progress_dialog.complete_all()
            
            # Ho√†n t·∫•t
            if app.should_stop or (self.progress_dialog and self.progress_dialog.is_cancelled):
                app.status_var.set(f"ƒê√£ d·ª´ng t·∫£i l√™n ({successful_uploads} th√†nh c√¥ng, {failed_uploads} th·∫•t b·∫°i)")
            else:
                app.status_var.set(f"ƒê√£ ho√†n t·∫•t: {successful_uploads} th√†nh c√¥ng, {failed_uploads} th·∫•t b·∫°i")
                
                # L√†m m·ªõi th·ªëng k√™ l·ªãch s·ª≠
                from ui.history_tab import refresh_history_stats
                refresh_history_stats(app)
        
        except Exception as e:
            import traceback
            logger.error(f"L·ªói trong qu√° tr√¨nh t·∫£i l√™n: {str(e)}")
            logger.error(traceback.format_exc())
            app.status_var.set(f"L·ªói: {str(e)}")
            
            # ƒê√≥ng dialog n·∫øu c√≥ l·ªói
            if self.progress_dialog:
                self.progress_dialog.dialog.destroy()
        
        finally:
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
            app.is_uploading = False
            
            # C·∫≠p nh·∫≠t giao di·ªán
            app.upload_btn.config(state=tk.NORMAL)
            app.stop_btn.config(state=tk.DISABLED)
    
    def stop_upload(self, app):
        """D·ª´ng qu√° tr√¨nh t·∫£i l√™n"""
        if app.is_uploading:
            app.should_stop = True
            app.status_var.set("ƒêang d·ª´ng t·∫£i l√™n...")
            logger.info("ƒê√£ y√™u c·∫ßu d·ª´ng qu√° tr√¨nh t·∫£i l√™n")
            
            # C·∫≠p nh·∫≠t dialog n·∫øu ƒëang hi·ªÉn th·ªã
            if self.progress_dialog:
                self.progress_dialog.cancel_upload()