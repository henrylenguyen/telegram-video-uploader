"""
Module hi·ªÉn th·ªã giao di·ªán x√°c th·ª±c OTP cho Telethon API
"""
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, pyqtSlot
import logging
import os
import traceback
import threading

logger = logging.getLogger(__name__)

class OTPVerificationState:
    """C√°c tr·∫°ng th√°i c·ªßa modal x√°c th·ª±c OTP"""
    LOADING = 0    # ƒêang t·∫£i/g·ª≠i m√£ OTP
    VERIFY = 1     # ƒêang nh·∫≠p m√£ x√°c th·ª±c
    EXPIRED = 2    # M√£ ƒë√£ h·∫øt h·∫°n

class OTPModal(QtWidgets.QDialog):
    """
    Modal x√°c th·ª±c OTP cho Telethon API
    """
    
    def __init__(self, parent=None, api_id=None, api_hash=None, phone=None):
        """Kh·ªüi t·∫°o modal OTP"""
        super(OTPModal, self).__init__(parent, Qt.Window)
        
        # L∆∞u th√¥ng tin API
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        
        # Tr·∫°ng th√°i hi·ªán t·∫°i
        self.current_state = OTPVerificationState.LOADING
        
        # Bi·∫øn l∆∞u m√£ OTP
        self.otp_code = ""
        
        # Th·ªùi gian h·∫øt h·∫°n OTP (m·∫∑c ƒë·ªãnh 2 ph√∫t)
        self.otp_expiry_seconds = 120
        self.countdown_seconds = self.otp_expiry_seconds
        
        # Bi·∫øn ki·ªÉm so√°t cooldown
        self.cooldown_seconds = 0
        
        # Thi·∫øt l·∫≠p UI
        self.setup_ui()
        
        # CƒÉn gi·ªØa c·ª≠a s·ªï
        self.center_on_screen()
        
        # K·∫øt n·ªëi c√°c s·ª± ki·ªán
        self.connect_events()
        
        # T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu qu√° tr√¨nh x√°c th·ª±c
        QtCore.QTimer.singleShot(100, self.start_verification)
    
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        # Thi·∫øt l·∫≠p c·ª≠a s·ªï
        self.setWindowTitle("X√°c th·ª±c Telethon API")
        self.setFixedSize(500, 450)
        
        # Thi·∫øt l·∫≠p stylesheet
        self.setStyleSheet("""
            QDialog {
                background-color: white;
                border-radius: 10px;
            }
            
            QLabel.titleLabel {
                font-size: 20px;
                font-weight: bold;
                color: #1E293B;
            }
            
            QLabel.messageLabel {
                font-size: 16px;
                font-weight: bold;
                color: #3498DB;
            }
            
            QLabel.infoLabel {
                font-size: 14px;
                color: #64748B;
            }
            
            QPushButton.primaryButton {
                background-color: #3498DB;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 10px 15px;
                font-size: 16px;
                font-weight: bold;
            }
            
            QPushButton.primaryButton:hover {
                background-color: #2980B9;
            }
            
            QPushButton.secondaryButton {
                background-color: #EBF5FB;
                color: #3498DB;
                border: 1px solid #BFDBFE;
                border-radius: 6px;
                padding: 10px 15px;
                font-size: 14px;
            }
            
            QPushButton.secondaryButton:hover {
                background-color: #D1E6FA;
            }
            
            QLineEdit.otpDigit {
                background-color: #F9FAFB;
                border: 1px solid #CBD5E1;
                border-radius: 8px;
                padding: 10px;
                font-size: 24px;
                color: #1E293B;
                text-align: center;
            }
            
            QFrame.statusInfo {
                background-color: #EBF8FF;
                border: 1px solid #BEE3F8;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        
        # Layout ch√≠nh
        self.main_layout = QtWidgets.QVBoxLayout(self)
        self.main_layout.setContentsMargins(30, 30, 30, 30)
        self.main_layout.setSpacing(20)
        
        # Stack cho c√°c tr·∫°ng th√°i kh√°c nhau
        self.state_stack = QtWidgets.QStackedWidget()
        
        # T·∫°o giao di·ªán cho c√°c tr·∫°ng th√°i
        self.loading_widget = self.create_loading_widget()
        self.verification_widget = self.create_verification_widget()
        self.expired_widget = self.create_expired_widget()
        
        # Th√™m v√†o stack
        self.state_stack.addWidget(self.loading_widget)
        self.state_stack.addWidget(self.verification_widget)
        self.state_stack.addWidget(self.expired_widget)
        
        # Th√™m v√†o layout ch√≠nh
        self.main_layout.addWidget(self.state_stack)
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë·∫ßu ti√™n
        self.state_stack.setCurrentIndex(self.current_state)
    
    def create_loading_widget(self):
        """T·∫°o widget hi·ªÉn th·ªã khi ƒëang t·∫£i/g·ª≠i m√£ OTP"""
        widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(20)
        
        # Ti√™u ƒë·ªÅ
        title_label = QtWidgets.QLabel("X√°c th·ª±c Telethon API")
        title_label.setProperty("class", "titleLabel")
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # Bi·ªÉu t∆∞·ª£ng loading
        loading_icon = self.create_loading_animation(50)
        layout.addWidget(loading_icon, 0, Qt.AlignCenter)
        
        # Th√¥ng b√°o
        self.loading_message = QtWidgets.QLabel("ƒêang g·ª≠i m√£ x√°c th·ª±c...")
        self.loading_message.setProperty("class", "messageLabel")
        self.loading_message.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.loading_message)
        
        # S·ªë ƒëi·ªán tho·∫°i
        phone_layout = QtWidgets.QHBoxLayout()
        phone_label = QtWidgets.QLabel("S·ªë ƒëi·ªán tho·∫°i:")
        phone_label.setProperty("class", "infoLabel")
        self.phone_edit = QtWidgets.QLineEdit()
        self.phone_edit.setReadOnly(True)
        if self.phone:
            self.phone_edit.setText(self.phone)
        phone_layout.addWidget(phone_label)
        phone_layout.addWidget(self.phone_edit)
        layout.addLayout(phone_layout)
        
        # Th√¥ng tin
        info_label = QtWidgets.QLabel("Vui l√≤ng ƒë·ª£i trong khi ch√∫ng t√¥i g·ª≠i m√£ x√°c th·ª±c ƒë·∫øn t√†i kho·∫£n Telegram c·ªßa b·∫°n.")
        info_label.setProperty("class", "infoLabel")
        info_label.setWordWrap(True)
        info_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(info_label)
        
        # N√∫t h·ªßy
        button_layout = QtWidgets.QHBoxLayout()
        self.cancel_button = QtWidgets.QPushButton("H·ªßy")
        self.cancel_button.setProperty("class", "secondaryButton")
        button_layout.addStretch()
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)
        
        return widget
    
    def create_verification_widget(self):
        """T·∫°o widget nh·∫≠p m√£ x√°c th·ª±c OTP"""
        widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(20)
        
        # Ti√™u ƒë·ªÅ
        title_label = QtWidgets.QLabel("Nh·∫≠p m√£ x√°c th·ª±c")
        title_label.setProperty("class", "titleLabel")
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # Th√¥ng b√°o
        message_layout = QtWidgets.QHBoxLayout()
        icon_label = QtWidgets.QLabel("üîí")
        icon_label.setStyleSheet("font-size: 20px;")
        self.verify_message = QtWidgets.QLabel("Nh·∫≠p m√£ x√°c th·ª±c Telegram ƒë√£ g·ª≠i cho b·∫°n")
        self.verify_message.setProperty("class", "messageLabel")
        message_layout.addWidget(icon_label)
        message_layout.addWidget(self.verify_message)
        layout.addLayout(message_layout)
        
        # Nh·∫≠p m√£ OTP
        otp_layout = QtWidgets.QHBoxLayout()
        otp_layout.setSpacing(10)
        
        # T·∫°o 5 √¥ nh·∫≠p m√£
        self.otp_digits = []
        for i in range(5):
            digit = QtWidgets.QLineEdit()
            digit.setProperty("class", "otpDigit")
            digit.setMaxLength(1)
            digit.setAlignment(Qt.AlignCenter)
            digit.setFixedSize(50, 50)
            digit.textChanged.connect(lambda text, idx=i: self.on_digit_changed(text, idx))
            otp_layout.addWidget(digit)
            self.otp_digits.append(digit)
        
        layout.addLayout(otp_layout)
        
        # Th·ªùi gian c√≤n l·∫°i
        countdown_frame = QtWidgets.QFrame()
        countdown_frame.setProperty("class", "statusInfo")
        countdown_layout = QtWidgets.QHBoxLayout(countdown_frame)
        countdown_layout.setContentsMargins(10, 10, 10, 10)
        
        timer_icon = QtWidgets.QLabel("‚è±Ô∏è")
        timer_icon.setStyleSheet("font-size: 16px;")
        self.countdown_label = QtWidgets.QLabel("M√£ x√°c th·ª±c c√≤n hi·ªáu l·ª±c trong: 02:00")
        countdown_layout.addWidget(timer_icon)
        countdown_layout.addWidget(self.countdown_label)
        countdown_layout.addStretch()
        
        layout.addWidget(countdown_frame)
        
        # N√∫t x√°c th·ª±c
        button_layout = QtWidgets.QHBoxLayout()
        self.verify_button = QtWidgets.QPushButton("X√°c th·ª±c")
        self.verify_button.setProperty("class", "primaryButton")
        self.verify_button.setEnabled(False)
        
        self.resend_button = QtWidgets.QPushButton("G·ª≠i l·∫°i m√£")
        self.resend_button.setProperty("class", "secondaryButton")
        self.resend_button.setEnabled(False)
        
        button_layout.addWidget(self.resend_button)
        button_layout.addStretch()
        button_layout.addWidget(self.verify_button)
        layout.addLayout(button_layout)
        
        return widget
    
    def create_expired_widget(self):
        """T·∫°o widget hi·ªÉn th·ªã khi m√£ OTP h·∫øt h·∫°n"""
        widget = QtWidgets.QWidget()
        layout = QtWidgets.QVBoxLayout(widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(20)
        
        # Ti√™u ƒë·ªÅ
        title_label = QtWidgets.QLabel("M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n")
        title_label.setProperty("class", "titleLabel")
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # Bi·ªÉu t∆∞·ª£ng
        icon_label = QtWidgets.QLabel("‚ö†Ô∏è")
        icon_label.setStyleSheet("font-size: 50px; color: #EF4444;")
        icon_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(icon_label)
        
        # Th√¥ng b√°o
        message = QtWidgets.QLabel("M√£ x√°c th·ª±c Telegram c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá.")
        message.setProperty("class", "messageLabel")
        message.setAlignment(Qt.AlignCenter)
        message.setWordWrap(True)
        layout.addWidget(message)
        
        # Th√¥ng tin cooldown
        cooldown_frame = QtWidgets.QFrame()
        cooldown_frame.setProperty("class", "statusInfo")
        cooldown_layout = QtWidgets.QHBoxLayout(cooldown_frame)
        
        timer_icon = QtWidgets.QLabel("‚è±Ô∏è")
        timer_icon.setStyleSheet("font-size: 16px;")
        self.cooldown_label = QtWidgets.QLabel("B·∫°n c·∫ßn ƒë·ª£i th√™m 60 gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i m√£")
        cooldown_layout.addWidget(timer_icon)
        cooldown_layout.addWidget(self.cooldown_label)
        
        layout.addWidget(cooldown_frame)
        
        # N√∫t g·ª≠i l·∫°i v√† h·ªßy
        button_layout = QtWidgets.QHBoxLayout()
        self.expired_resend_button = QtWidgets.QPushButton("G·ª≠i l·∫°i m√£")
        self.expired_resend_button.setProperty("class", "primaryButton")
        self.expired_resend_button.setEnabled(False)
        
        self.expired_cancel_button = QtWidgets.QPushButton("H·ªßy")
        self.expired_cancel_button.setProperty("class", "secondaryButton")
        
        button_layout.addWidget(self.expired_cancel_button)
        button_layout.addStretch()
        button_layout.addWidget(self.expired_resend_button)
        layout.addLayout(button_layout)
        
        layout.addStretch()
        
        return widget
    
    def center_on_screen(self):
        """ƒê·∫∑t c·ª≠a s·ªï v√†o gi·ªØa m√†n h√¨nh"""
        frame_geometry = self.frameGeometry()
        screen_center = QtWidgets.QDesktopWidget().availableGeometry().center()
        frame_geometry.moveCenter(screen_center)
        self.move(frame_geometry.topLeft())
    
    def create_loading_animation(self, size):
        """T·∫°o label v·ªõi animation loading xoay tr√≤n"""
        loading_label = QtWidgets.QLabel()
        loading_label.setFixedSize(size, size)
        
        # T·∫°o movie t·ª´ ·∫£nh ƒë·ªông (n·∫øu c√≥)
        loading_movie = None
        try:
            # Th·ª≠ t√¨m file loading.gif
            current_dir = os.path.dirname(os.path.abspath(__file__))
            loading_path = os.path.join(current_dir, "assets", "loading.gif")
            
            if not os.path.exists(loading_path):
                # Th·ª≠ ƒë∆∞·ªùng d·∫´n kh√°c
                loading_path = os.path.join(current_dir, "..", "assets", "loading.gif")
            
            if os.path.exists(loading_path):
                loading_movie = QtGui.QMovie(loading_path)
                loading_movie.setScaledSize(QtCore.QSize(size, size))
                loading_label.setMovie(loading_movie)
                loading_movie.start()
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ t·∫°o loading animation: {str(e)}")
        
        # N·∫øu kh√¥ng c√≥ animation, t·∫°o text thay th·∫ø
        if not loading_movie:
            loading_label.setText("‚åõ")
            loading_label.setAlignment(Qt.AlignCenter)
            loading_label.setStyleSheet(f"font-size: {size//2}px; color: #3498DB;")
        
        return loading_label
    
    def connect_events(self):
        """K·∫øt n·ªëi s·ª± ki·ªán cho c√°c control"""
        # N√∫t trong widget loading
        self.cancel_button.clicked.connect(self.reject)
        
        # N√∫t trong widget verification
        self.verify_button.clicked.connect(self.verify_otp)
        self.resend_button.clicked.connect(self.resend_code)
        
        # N√∫t trong widget expired
        self.expired_cancel_button.clicked.connect(self.reject)
        self.expired_resend_button.clicked.connect(self.resend_code)
    
    def start_verification(self):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√°c th·ª±c OTP"""
        # Ki·ªÉm tra gi·ªõi h·∫°n y√™u c·∫ßu OTP
        if not self.check_otp_request_limits():
            return
        
        # Y√™u c·∫ßu m√£ OTP
        self.request_otp_code()
    
    def check_otp_request_limits(self):
        """Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l·∫ßn y√™u c·∫ßu OTP"""
        try:
            from utils.otp_manager import OTPManager
            
            # Kh·ªüi t·∫°o OTP Manager
            otp_manager = OTPManager()
            
            # Ki·ªÉm tra gi·ªõi h·∫°n
            can_request, message = otp_manager.check_request_limits()
            
            if not can_request:
                # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
                QtWidgets.QMessageBox.warning(
                    self,
                    "Gi·ªõi h·∫°n y√™u c·∫ßu OTP",
                    message,
                    QtWidgets.QMessageBox.Ok
                )
                
                # L·∫•y th√¥ng tin gi·ªõi h·∫°n hi·ªán t·∫°i
                limits = otp_manager.get_current_limits()
                
                # N·∫øu ƒëang trong th·ªùi gian ch·ªù cooldown, hi·ªÉn th·ªã m√†n h√¨nh expired
                if limits["cooldown_remaining"] > 0:
                    self.cooldown_seconds = limits["cooldown_remaining"]
                    self.current_state = OTPVerificationState.EXPIRED
                    self.state_stack.setCurrentIndex(self.current_state)
                    
                    # C·∫≠p nh·∫≠t label cooldown
                    self.cooldown_label.setText(f"B·∫°n c·∫ßn ƒë·ª£i th√™m {self.cooldown_seconds} gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i m√£")
                    
                    # B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c cooldown
                    self.start_cooldown_timer()
                    
                    return False
                else:
                    # N·∫øu ƒë√£ v∆∞·ª£t qu√° s·ªë l·∫ßn y√™u c·∫ßu trong ng√†y, ƒë√≥ng dialog
                self.reject()
                return False
        
            return True
        except Exception as e:
            logger.error(f"L·ªói ki·ªÉm tra gi·ªõi h·∫°n OTP: {str(e)}")
            logger.error(traceback.format_exc())
            
            # Gi·∫£ ƒë·ªãnh c√≥ th·ªÉ y√™u c·∫ßu OTP
        return True
    
    def request_otp_code(self):
        """G·ª≠i y√™u c·∫ßu m√£ OTP ƒë·∫øn Telethon API"""
        # C·∫≠p nh·∫≠t giao di·ªán
        self.loading_message.setText("ƒêang g·ª≠i m√£ x√°c th·ª±c...")
        QtWidgets.QApplication.processEvents()
        
        # Ki·ªÉm tra API ID v√† API Hash
        if not self.api_id or not self.api_hash or not self.phone:
            QtWidgets.QMessageBox.warning(
                self,
                "Thi·∫øu th√¥ng tin",
                "Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telethon API. Vui l√≤ng ki·ªÉm tra l·∫°i.",
                QtWidgets.QMessageBox.Ok
            )
            self.reject()
            return
        
        # Ghi nh·∫≠n y√™u c·∫ßu OTP
        try:
            from utils.otp_manager import OTPManager
            otp_manager = OTPManager()
            otp_manager.record_request()
        except Exception as e:
            logger.error(f"L·ªói ghi nh·∫≠n y√™u c·∫ßu OTP: {str(e)}")
        
        # T·∫°o v√† kh·ªüi ƒë·ªông thread y√™u c·∫ßu OTP
        def otp_request_thread():
            try:
                from utils.otp_manager import TelethonSessionManager
                from telethon.errors import FloodWaitError, PhoneNumberInvalidError, ApiIdInvalidError
                
                session_manager = TelethonSessionManager()
                client = session_manager.create_client(self.api_id, self.api_hash)
                
                # Ki·ªÉm tra xem ƒë√£ ƒëƒÉng nh·∫≠p ch∆∞a
                async def check_auth():
                    await client.connect()
                    if await client.is_user_authorized():
                        # ƒê√£ ƒëƒÉng nh·∫≠p r·ªìi
                        QtCore.QMetaObject.invokeMethod(self, "on_already_authorized", Qt.QueuedConnection)
                        return True
                    
                    # Ch∆∞a ƒëƒÉng nh·∫≠p, g·ª≠i m√£ x√°c th·ª±c
                    try:
                        await client.send_code_request(self.phone)
                        # G·ª≠i m√£ th√†nh c√¥ng
                        QtCore.QMetaObject.invokeMethod(self, "on_code_sent", Qt.QueuedConnection)
                        return False
                    except FloodWaitError as e:
                        # B·ªã gi·ªõi h·∫°n, c·∫ßn ƒë·ª£i
                        error_msg = f"B·∫°n c·∫ßn ƒë·ª£i {e.seconds} gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i m√£"
                        QtCore.QMetaObject.invokeMethod(
                            self, "on_request_error", 
                            Qt.QueuedConnection,
                            QtCore.Q_ARG(str, error_msg)
                        )
                    except (PhoneNumberInvalidError, ApiIdInvalidError) as e:
                        # S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá
                        error_msg = f"L·ªói: {str(e)}"
                QtCore.QMetaObject.invokeMethod(
                            self, "on_request_error",
                            Qt.QueuedConnection,
                            QtCore.Q_ARG(str, error_msg)
                        )
                    except Exception as e:
                        # L·ªói kh√°c
                        error_msg = f"L·ªói: {str(e)}"
            QtCore.QMetaObject.invokeMethod(
                            self, "on_request_error",
                            Qt.QueuedConnection,
                            QtCore.Q_ARG(str, error_msg)
                        )
                    
                    return False
                
                # Ch·∫°y coroutine
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(check_auth())
                loop.close()
            
        except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i y√™u c·∫ßu OTP: {str(e)}")
                logger.error(traceback.format_exc())
                
                # Th√¥ng b√°o l·ªói
            QtCore.QMetaObject.invokeMethod(
                    self, "on_request_error",
                Qt.QueuedConnection,
                    QtCore.Q_ARG(str, f"L·ªói: {str(e)}")
            )
        
        # Kh·ªüi ƒë·ªông thread
        threading.Thread(target=otp_request_thread, daemon=True).start()
    
    @QtCore.pyqtSlot()
    def on_already_authorized(self):
        """X·ª≠ l√Ω khi t√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c"""
        # Hi·ªÉn th·ªã th√¥ng b√°o
        QtWidgets.QMessageBox.information(
            self,
            "ƒê√£ x√°c th·ª±c",
            "T√†i kho·∫£n Telethon c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c. Kh√¥ng c·∫ßn nh·∫≠p m√£ OTP.",
            QtWidgets.QMessageBox.Ok
        )
        
        # C·∫≠p nh·∫≠t x√°c th·ª±c th√†nh c√¥ng v√† ƒë√≥ng dialog
        self.accept()
    
    @QtCore.pyqtSlot()
    def on_code_sent(self):
        """X·ª≠ l√Ω khi m√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng"""
        # C·∫≠p nh·∫≠t giao di·ªán
        self.current_state = OTPVerificationState.VERIFY
        self.state_stack.setCurrentIndex(self.current_state)
        
        # Focus v√†o √¥ nh·∫≠p ƒë·∫ßu ti√™n
        if self.otp_digits and len(self.otp_digits) > 0:
        self.otp_digits[0].setFocus()
        
        # B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
        self.countdown_seconds = self.otp_expiry_seconds
        timer = QTimer(self)
        timer.timeout.connect(self.update_countdown)
        timer.start(1000)
    
    @QtCore.pyqtSlot(str)
    def on_request_error(self, error_message):
        """X·ª≠ l√Ω khi c√≥ l·ªói y√™u c·∫ßu m√£ OTP"""
        # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        QtWidgets.QMessageBox.warning(
            self,
            "L·ªói g·ª≠i m√£ x√°c th·ª±c",
            error_message,
            QtWidgets.QMessageBox.Ok
        )
        
        # ƒê√≥ng dialog
        self.reject()
    
    def on_digit_changed(self, text, index):
        """X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p k√Ω t·ª± v√†o √¥ OTP"""
        if text:
            # T·ª± ƒë·ªông chuy·ªÉn ƒë·∫øn √¥ ti·∫øp theo
            if index < len(self.otp_digits) - 1:
                self.otp_digits[index + 1].setFocus()
                
            # Ki·ªÉm tra xem ƒë√£ nh·∫≠p ƒë·ªß OTP ch∆∞a
            self.check_otp_complete()
        
        # X·ª≠ l√Ω khi x√≥a k√Ω t·ª±
        if not text and index > 0:
            # Focus v·ªÅ √¥ tr∆∞·ªõc ƒë√≥
            self.otp_digits[index - 1].setFocus()
    
    def check_otp_complete(self):
        """Ki·ªÉm tra xem ƒë√£ nh·∫≠p ƒë·ªß m√£ OTP ch∆∞a v√† b·∫≠t n√∫t x√°c th·ª±c"""
        otp_code = self.get_otp_code()
        
        # Ch·ªâ b·∫≠t n√∫t x√°c th·ª±c khi ƒë√£ nh·∫≠p ƒë·ªß m√£ (ƒë·ªß 5 k√Ω t·ª±)
        if len(otp_code) == 5:
            self.verify_button.setEnabled(True)
        else:
            self.verify_button.setEnabled(False)
    
    def get_otp_code(self):
        """L·∫•y m√£ OTP ƒë√£ nh·∫≠p"""
        if not hasattr(self, 'otp_digits'):
            return ""
        
        return ''.join([digit.text() for digit in self.otp_digits])
    
    def update_countdown(self):
        """C·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i c·ªßa m√£ OTP"""
        if self.countdown_seconds > 0:
            self.countdown_seconds -= 1
            minutes = self.countdown_seconds // 60
            seconds = self.countdown_seconds % 60
            self.countdown_label.setText(f"M√£ x√°c th·ª±c c√≤n hi·ªáu l·ª±c trong: {minutes:02d}:{seconds:02d}")
            
            # B·∫≠t n√∫t g·ª≠i l·∫°i khi c√≤n d∆∞·ªõi 30 gi√¢y
            if self.countdown_seconds <= 30:
                self.resend_button.setEnabled(True)
        else:
            # H·∫øt th·ªùi gian, chuy·ªÉn sang tr·∫°ng th√°i h·∫øt h·∫°n
            self.current_state = OTPVerificationState.EXPIRED
            self.state_stack.setCurrentIndex(self.current_state)
            
            # B·∫Øt ƒë·∫ßu cooldown
            self.cooldown_seconds = 60  # 1 ph√∫t cooldown
            self.cooldown_label.setText(f"B·∫°n c·∫ßn ƒë·ª£i th√™m {self.cooldown_seconds} gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i m√£")
            
                # B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c cooldown
                self.start_cooldown_timer()
    
    def start_cooldown_timer(self):
        """B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn g·ª≠i m√£"""
        # T·∫Øt n√∫t g·ª≠i l·∫°i
        self.expired_resend_button.setEnabled(False)
        
        # B·∫Øt ƒë·∫ßu timer
        timer = QTimer(self)
        timer.timeout.connect(self.update_cooldown)
        timer.start(1000)
    
    def update_cooldown(self):
        """C·∫≠p nh·∫≠t th·ªùi gian ch·ªù c√≤n l·∫°i"""
        if self.cooldown_seconds > 0:
            self.cooldown_seconds -= 1
            self.cooldown_label.setText(f"B·∫°n c·∫ßn ƒë·ª£i th√™m {self.cooldown_seconds} gi√¢y tr∆∞·ªõc khi g·ª≠i l·∫°i m√£")
        else:
            # H·∫øt th·ªùi gian cooldown
            self.cooldown_label.setText("B·∫°n c√≥ th·ªÉ g·ª≠i l·∫°i m√£ x√°c th·ª±c ngay b√¢y gi·ªù")
            
            # B·∫≠t n√∫t g·ª≠i l·∫°i
            self.expired_resend_button.setEnabled(True)
            
            # D·ª´ng timer
            sender = self.sender()
            if isinstance(sender, QTimer):
                sender.stop()
    
    def verify_otp(self):
        """X√°c th·ª±c m√£ OTP ƒë√£ nh·∫≠p"""
        # L·∫•y m√£ OTP
        otp_code = self.get_otp_code()
        
        # Ki·ªÉm tra m√£ c√≥ ƒë·ªß ƒë·ªô d√†i kh√¥ng
        if len(otp_code) != 5:
            QtWidgets.QMessageBox.warning(
                self,
                "M√£ kh√¥ng h·ª£p l·ªá",
                "Vui l√≤ng nh·∫≠p ƒë·ªß 5 k√Ω t·ª± c·ªßa m√£ x√°c th·ª±c.",
                QtWidgets.QMessageBox.Ok
            )
            return
        
        # Ti·∫øn h√†nh x√°c th·ª±c
        self.verify_otp_code(otp_code)
    
    def verify_otp_code(self, otp_code):
        """G·ª≠i m√£ OTP ƒë·∫øn Telethon API ƒë·ªÉ x√°c th·ª±c"""
        # C·∫≠p nh·∫≠t giao di·ªán
        self.verify_button.setEnabled(False)
        self.verify_button.setText("ƒêang x√°c th·ª±c...")
        QtWidgets.QApplication.processEvents()
        
        # T·∫°o v√† kh·ªüi ƒë·ªông thread x√°c th·ª±c
        def otp_verify_thread():
            try:
                from utils.otp_manager import TelethonSessionManager
                from telethon.errors import SessionPasswordNeededError, PhoneCodeInvalidError
                
                session_manager = TelethonSessionManager()
                client = session_manager.create_client(self.api_id, self.api_hash)
                
                # X√°c th·ª±c OTP
                async def verify_code():
                    try:
                        await client.connect()
                        
                        # N·∫øu ƒë√£ x√°c th·ª±c r·ªìi
                        if await client.is_user_authorized():
                            QtCore.QMetaObject.invokeMethod(self, "on_verification_success", Qt.QueuedConnection)
                return
            
                        # X√°c th·ª±c m√£
                        await client.sign_in(self.phone, code=otp_code)
            
            # X√°c th·ª±c th√†nh c√¥ng
                        QtCore.QMetaObject.invokeMethod(self, "on_verification_success", Qt.QueuedConnection)
                    except PhoneCodeInvalidError:
                        # M√£ kh√¥ng h·ª£p l·ªá
                        QtCore.QMetaObject.invokeMethod(
                            self, "on_verification_error",
                            Qt.QueuedConnection,
                            QtCore.Q_ARG(str, "M√£ x√°c th·ª±c kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.")
                        )
                    except SessionPasswordNeededError:
                        # C·∫ßn m·∫≠t kh·∫©u 2FA - kh√¥ng h·ªó tr·ª£ trong UI n√†y
                        QtCore.QMetaObject.invokeMethod(
                            self, "on_verification_error",
                            Qt.QueuedConnection,
                            QtCore.Q_ARG(str, "T√†i kho·∫£n c·ªßa b·∫°n y√™u c·∫ßu m·∫≠t kh·∫©u 2FA. T√≠nh nƒÉng n√†y ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£.")
                        )
                    except Exception as e:
                        # L·ªói kh√°c
            QtCore.QMetaObject.invokeMethod(
                            self, "on_verification_error",
                            Qt.QueuedConnection,
                            QtCore.Q_ARG(str, f"L·ªói: {str(e)}")
                        )
                
                # Ch·∫°y coroutine
                import asyncio
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(verify_code())
                loop.close()
                
        except Exception as e:
                logger.error(f"L·ªói khi x√°c th·ª±c OTP: {str(e)}")
                logger.error(traceback.format_exc())
                
                # Th√¥ng b√°o l·ªói
            QtCore.QMetaObject.invokeMethod(
                    self, "on_verification_error",
                Qt.QueuedConnection,
                    QtCore.Q_ARG(str, f"L·ªói: {str(e)}")
            )
        
        # Kh·ªüi ƒë·ªông thread
        threading.Thread(target=otp_verify_thread, daemon=True).start()
    
    @QtCore.pyqtSlot()
    def on_verification_success(self):
        """X·ª≠ l√Ω khi x√°c th·ª±c th√†nh c√¥ng"""
        # Hi·ªÉn th·ªã th√¥ng b√°o
        QtWidgets.QMessageBox.information(
            self,
            "X√°c th·ª±c th√†nh c√¥ng",
            "T√†i kho·∫£n Telethon c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng.",
            QtWidgets.QMessageBox.Ok
        )
        
        # C·∫≠p nh·∫≠t x√°c th·ª±c th√†nh c√¥ng v√† ƒë√≥ng dialog
        self.accept()
    
    @QtCore.pyqtSlot(str)
    def on_verification_error(self, error_message):
        """X·ª≠ l√Ω khi c√≥ l·ªói x√°c th·ª±c"""
        # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        QtWidgets.QMessageBox.warning(
            self,
            "L·ªói x√°c th·ª±c",
            error_message,
            QtWidgets.QMessageBox.Ok
        )
        
        # Reset UI
        self.verify_button.setEnabled(True)
        self.verify_button.setText("X√°c th·ª±c")
        
        # X√≥a m√£ OTP ƒë√£ nh·∫≠p v√† focus l·∫°i √¥ ƒë·∫ßu ti√™n
        for digit in self.otp_digits:
            digit.clear()
        
        if self.otp_digits and len(self.otp_digits) > 0:
            self.otp_digits[0].setFocus()
    
    def resend_code(self):
        """G·ª≠i l·∫°i m√£ OTP"""
        # Chuy·ªÉn v·ªÅ tr·∫°ng th√°i loading
        self.current_state = OTPVerificationState.LOADING
        self.state_stack.setCurrentIndex(self.current_state)
        
        # X√≥a m√£ OTP ƒë√£ nh·∫≠p
        if hasattr(self, 'otp_digits'):
            for digit in self.otp_digits:
                digit.clear()
        
        # G·ª≠i l·∫°i m√£
        self.start_verification()
    
    def closeEvent(self, event):
        """X·ª≠ l√Ω khi ƒë√≥ng c·ª≠a s·ªï"""
        # D·ª´ng t·∫•t c·∫£ c√°c timer
        for child in self.findChildren(QTimer):
            child.stop()
        
        # Ch·∫•p nh·∫≠n s·ª± ki·ªán ƒë√≥ng
        event.accept()

if __name__ == "__main__":
    # Test modal
    app = QtWidgets.QApplication(sys.argv)
    modal = OTPModal(api_id="12345678", api_hash="abcdef1234567890", phone="+84123456789")
    result = modal.exec_()
    print(f"Result: {result}, Success: {modal.verification_success}")
    sys.exit(app.exec_()) 