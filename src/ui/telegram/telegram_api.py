"""
Module x·ª≠ l√Ω giao ti·∫øp v·ªõi Telegram Bot API.
"""
import os
import sys
import time
import json
import logging
import requests
import traceback
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class TelegramAPI:
    """
    L·ªõp x·ª≠ l√Ω giao ti·∫øp v·ªõi Telegram Bot API
    """
    
    def __init__(self, token=None):
        """
        Kh·ªüi t·∫°o l·ªõp TelegramAPI
        
        Args:
            token (str, optional): Token c·ªßa bot Telegram
        """
        self.token = token
        self.base_url = None
        self.connected = False
        self.bot_info = None
        
        # K·∫øt n·ªëi n·∫øu c√≥ token
        if self.token:
            self.connect(self.token)
    
    def connect(self, token):
        """
        K·∫øt n·ªëi ƒë·∫øn Telegram Bot API
        
        Args:
            token (str): Token c·ªßa bot Telegram
            
        Returns:
            bool: True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        
        # Ki·ªÉm tra k·∫øt n·ªëi
        try:
            response = requests.get(f"{self.base_url}/getMe", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get("ok", False):
                    self.bot_info = data.get("result", {})
                    self.connected = True
                    logger.info(f"K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn bot {self.bot_info.get('username', 'unknown')}")
                    return True
            
            # N·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c
            logger.error(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn bot: {response.text}")
            self.connected = False
            return False
        except requests.exceptions.RequestException as e:
            logger.error(f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn Telegram API: {str(e)}")
            logger.error(traceback.format_exc())
            self.connected = False
            return False
    
    def test_connection(self, chat_id, delete_after=None):
        """
        Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch g·ª≠i m·ªôt tin nh·∫Øn ƒë·∫øn chat
        
        Args:
            chat_id (str): ID c·ªßa chat c·∫ßn g·ª≠i tin nh·∫Øn
            delete_after (int, optional): S·ªë gi√¢y sau khi g·ª≠i tin nh·∫Øn s·∫Ω t·ª± ƒë·ªông x√≥a
            
        Returns:
            dict: Th√¥ng tin c·ªßa bot n·∫øu k·∫øt n·ªëi th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        if not self.connected or not self.token:
            logger.error("Ch∆∞a k·∫øt n·ªëi ƒë·∫øn Telegram Bot API")
            return None
            
        try:
            # T·∫°o tin nh·∫Øn ki·ªÉm tra k·∫øt n·ªëi
            current_time = datetime.now().strftime("%H:%M:%S %d/%m/%Y")
            message = f"üîÑ Ki·ªÉm tra k·∫øt n·ªëi Telegram\n\n‚è± Th·ªùi gian: {current_time}\n\n‚öôÔ∏è Bot: @{self.bot_info.get('username', 'unknown')}\n\n‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!"
            
            # G·ª≠i tin nh·∫Øn
            response = requests.post(
                f"{self.base_url}/sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": message,
                    "parse_mode": "HTML"
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get("ok", False):
                    # L·∫•y message_id ƒë·ªÉ x√≥a sau n·∫øu c·∫ßn
                    message_id = data.get("result", {}).get("message_id")
                    
                    # X√≥a tin nh·∫Øn sau m·ªôt kho·∫£ng th·ªùi gian n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
                    if delete_after and message_id:
                        # L·∫≠p l·ªãch x√≥a tin nh·∫Øn sau delete_after gi√¢y
                        self._schedule_delete_message(chat_id, message_id, delete_after)
                    
                    return self.bot_info
            
            # N·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn chat {chat_id}: {response.text}")
            return None
        except requests.exceptions.RequestException as e:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn ki·ªÉm tra: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def _schedule_delete_message(self, chat_id, message_id, delay):
        """
        L√™n l·ªãch x√≥a tin nh·∫Øn sau m·ªôt kho·∫£ng th·ªùi gian
        
        Args:
            chat_id (str): ID c·ªßa chat ch·ª©a tin nh·∫Øn
            message_id (int): ID c·ªßa tin nh·∫Øn c·∫ßn x√≥a
            delay (int): S·ªë gi√¢y sau khi s·∫Ω x√≥a tin nh·∫Øn
        """
        import threading
        
        def delete_message():
            # ƒê·ª£i delay gi√¢y
            time.sleep(delay)
            
            # X√≥a tin nh·∫Øn
            try:
                requests.post(
                    f"{self.base_url}/deleteMessage",
                    json={
                        "chat_id": chat_id,
                        "message_id": message_id
                    },
                    timeout=10
                )
            except Exception as e:
                logger.error(f"L·ªói khi x√≥a tin nh·∫Øn: {str(e)}")
        
        # T·∫°o thread m·ªõi ƒë·ªÉ kh√¥ng ch·∫∑n lu·ªìng ch√≠nh
        thread = threading.Thread(target=delete_message)
        thread.daemon = True
        thread.start()
    
    def send_message(self, chat_id, text, parse_mode=None, disable_notification=False, reply_to_message_id=None):
        """
        G·ª≠i tin nh·∫Øn ƒë·∫øn chat
        
        Args:
            chat_id (str): ID c·ªßa chat c·∫ßn g·ª≠i tin nh·∫Øn
            text (str): N·ªôi dung tin nh·∫Øn
            parse_mode (str, optional): Ch·∫ø ƒë·ªô ƒë·ªãnh d·∫°ng tin nh·∫Øn (HTML, Markdown)
            disable_notification (bool, optional): T·∫Øt th√¥ng b√°o
            reply_to_message_id (int, optional): ID c·ªßa tin nh·∫Øn c·∫ßn tr·∫£ l·ªùi
            
        Returns:
            dict: K·∫øt qu·∫£ c·ªßa API n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        if not self.connected or not self.token:
            logger.error("Ch∆∞a k·∫øt n·ªëi ƒë·∫øn Telegram Bot API")
            return None
            
        try:
            # T·∫°o d·ªØ li·ªáu g·ª≠i ƒëi
            data = {
                "chat_id": chat_id,
                "text": text
            }
            
            # Th√™m c√°c tham s·ªë t√πy ch·ªçn
            if parse_mode:
                data["parse_mode"] = parse_mode
            
            if disable_notification:
                data["disable_notification"] = True
            
            if reply_to_message_id:
                data["reply_to_message_id"] = reply_to_message_id
            
            # G·ª≠i tin nh·∫Øn
            response = requests.post(
                f"{self.base_url}/sendMessage",
                json=data,
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json().get("result")
            else:
                logger.error(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn chat {chat_id}: {response.text}")
                return None
        except requests.exceptions.RequestException as e:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def send_photo(self, chat_id, photo, caption=None, parse_mode=None, disable_notification=False):
        """
        G·ª≠i ·∫£nh ƒë·∫øn chat
        
        Args:
            chat_id (str): ID c·ªßa chat c·∫ßn g·ª≠i ·∫£nh
            photo (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file ·∫£nh ho·∫∑c file_id c·ªßa ·∫£nh ƒë√£ t·∫£i l√™n
            caption (str, optional): Ch√∫ th√≠ch cho ·∫£nh
            parse_mode (str, optional): Ch·∫ø ƒë·ªô ƒë·ªãnh d·∫°ng ch√∫ th√≠ch (HTML, Markdown)
            disable_notification (bool, optional): T·∫Øt th√¥ng b√°o
            
        Returns:
            dict: K·∫øt qu·∫£ c·ªßa API n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        if not self.connected or not self.token:
            logger.error("Ch∆∞a k·∫øt n·ªëi ƒë·∫øn Telegram Bot API")
            return None
            
        try:
            # T·∫°o d·ªØ li·ªáu g·ª≠i ƒëi
            data = {
                "chat_id": chat_id
            }
            
            # Th√™m c√°c tham s·ªë t√πy ch·ªçn
            if caption:
                data["caption"] = caption
            
            if parse_mode:
                data["parse_mode"] = parse_mode
            
            if disable_notification:
                data["disable_notification"] = True
            
            # Ki·ªÉm tra lo·∫°i photo
            if os.path.exists(photo):
                # N·∫øu l√† ƒë∆∞·ªùng d·∫´n file tr√™n m√°y
                files = {"photo": open(photo, "rb")}
                response = requests.post(
                    f"{self.base_url}/sendPhoto",
                    data=data,
                    files=files,
                    timeout=60
                )
            else:
                # N·∫øu l√† file_id ho·∫∑c URL
                data["photo"] = photo
                response = requests.post(
                    f"{self.base_url}/sendPhoto",
                    json=data,
                    timeout=60
                )
            
            if response.status_code == 200:
                return response.json().get("result")
            else:
                logger.error(f"Kh√¥ng th·ªÉ g·ª≠i ·∫£nh ƒë·∫øn chat {chat_id}: {response.text}")
                return None
        except requests.exceptions.RequestException as e:
            logger.error(f"L·ªói khi g·ª≠i ·∫£nh: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def send_video(self, chat_id, video, caption=None, parse_mode=None, disable_notification=False, width=None, height=None, duration=None):
        """
        G·ª≠i video ƒë·∫øn chat
        
        Args:
            chat_id (str): ID c·ªßa chat c·∫ßn g·ª≠i video
            video (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video ho·∫∑c file_id c·ªßa video ƒë√£ t·∫£i l√™n
            caption (str, optional): Ch√∫ th√≠ch cho video
            parse_mode (str, optional): Ch·∫ø ƒë·ªô ƒë·ªãnh d·∫°ng ch√∫ th√≠ch (HTML, Markdown)
            disable_notification (bool, optional): T·∫Øt th√¥ng b√°o
            width (int, optional): Chi·ªÅu r·ªông c·ªßa video
            height (int, optional): Chi·ªÅu cao c·ªßa video
            duration (int, optional): Th·ªùi l∆∞·ª£ng c·ªßa video (gi√¢y)
            
        Returns:
            dict: K·∫øt qu·∫£ c·ªßa API n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        if not self.connected or not self.token:
            logger.error("Ch∆∞a k·∫øt n·ªëi ƒë·∫øn Telegram Bot API")
            return None
            
        try:
            # T·∫°o d·ªØ li·ªáu g·ª≠i ƒëi
            data = {
                "chat_id": chat_id
            }
            
            # Th√™m c√°c tham s·ªë t√πy ch·ªçn
            if caption:
                data["caption"] = caption
            
            if parse_mode:
                data["parse_mode"] = parse_mode
            
            if disable_notification:
                data["disable_notification"] = True
            
            if width:
                data["width"] = width
            
            if height:
                data["height"] = height
            
            if duration:
                data["duration"] = duration
            
            # Ki·ªÉm tra lo·∫°i video
            if os.path.exists(video):
                # N·∫øu l√† ƒë∆∞·ªùng d·∫´n file tr√™n m√°y
                files = {"video": open(video, "rb")}
                response = requests.post(
                    f"{self.base_url}/sendVideo",
                    data=data,
                    files=files,
                    timeout=300  # Th·ªùi gian ch·ªù d√†i h∆°n cho video
                )
            else:
                # N·∫øu l√† file_id ho·∫∑c URL
                data["video"] = video
                response = requests.post(
                    f"{self.base_url}/sendVideo",
                    json=data,
                    timeout=60
                )
            
            if response.status_code == 200:
                return response.json().get("result")
            else:
                logger.error(f"Kh√¥ng th·ªÉ g·ª≠i video ƒë·∫øn chat {chat_id}: {response.text}")
                return None
        except requests.exceptions.RequestException as e:
            logger.error(f"L·ªói khi g·ª≠i video: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def get_chat(self, chat_id):
        """
        L·∫•y th√¥ng tin c·ªßa chat
        
        Args:
            chat_id (str): ID c·ªßa chat c·∫ßn l·∫•y th√¥ng tin
            
        Returns:
            dict: Th√¥ng tin chat n·∫øu th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        if not self.connected or not self.token:
            logger.error("Ch∆∞a k·∫øt n·ªëi ƒë·∫øn Telegram Bot API")
            return None
            
        try:
            response = requests.get(
                f"{self.base_url}/getChat",
                params={"chat_id": chat_id},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get("ok", False):
                    return data.get("result")
            
            # N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin chat
            logger.error(f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chat {chat_id}: {response.text}")
            return None
        except requests.exceptions.RequestException as e:
            logger.error(f"L·ªói khi l·∫•y th√¥ng tin chat: {str(e)}")
            logger.error(traceback.format_exc())
            return None
    
    def delete_message(self, chat_id, message_id):
        """
        X√≥a tin nh·∫Øn kh·ªèi chat
        
        Args:
            chat_id (str): ID c·ªßa chat ch·ª©a tin nh·∫Øn
            message_id (int): ID c·ªßa tin nh·∫Øn c·∫ßn x√≥a
            
        Returns:
            bool: True n·∫øu x√≥a th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        if not self.connected or not self.token:
            logger.error("Ch∆∞a k·∫øt n·ªëi ƒë·∫øn Telegram Bot API")
            return False
            
        try:
            response = requests.post(
                f"{self.base_url}/deleteMessage",
                json={
                    "chat_id": chat_id,
                    "message_id": message_id
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get("ok", False):
                    return True
            
            # N·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c tin nh·∫Øn
            logger.error(f"Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn {message_id} t·ª´ chat {chat_id}: {response.text}")
            return False
        except requests.exceptions.RequestException as e:
            logger.error(f"L·ªói khi x√≥a tin nh·∫Øn: {str(e)}")
            logger.error(traceback.format_exc())
            return False