"""
Module for interacting with Telegram API
"""

import os
import logging
import tempfile
import time
from datetime import datetime
import telebot
from telebot import apihelper
from telebot.types import InputFile
from utils.video_splitter import VideoSplitter

logger = logging.getLogger("TelegramAPI")

class TelegramAPI:
    """
    Class for interacting with Telegram API
    """
    
    def __init__(self, bot_token=None):
        """
        Initialize Telegram API
        
        Args:
            bot_token (str): Telegram Bot token
        """
        self.bot = None
        self.connected = False
        
        # Connect if token provided
        if bot_token:
            self.connect(bot_token)
    
    def connect(self, bot_token):
        """
        Connect to Telegram Bot API
        
        Args:
            bot_token (str): Telegram Bot token
            
        Returns:
            bool: True if connected successfully
        """
        try:
            # Set up API
            self.bot = telebot.TeleBot(bot_token)
            
            # Test connection
            bot_info = self.bot.get_me()
            if bot_info:
                self.connected = True
                return True
            else:
                self.connected = False
                return False
        except Exception as e:
            logger.error(f"L·ªói khi k·∫øt n·ªëi Telegram: {str(e)}")
            self.bot = None
            self.connected = False
            return False
    
    def disconnect(self):
        """Disconnect from Telegram Bot API"""
        self.bot = None
        self.connected = False
    
    def send_video(self, chat_id, video_path, caption=None, width=None, height=None, duration=None, disable_notification=False, progress_callback=None):
        """
        G·ª≠i video ƒë·∫øn Telegram chat/channel
        
        Args:
            chat_id (str/int): ID c·ªßa cu·ªôc tr√≤ chuy·ªán/k√™nh
            video_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video
            caption (str): Ch√∫ th√≠ch cho video
            width (int): Chi·ªÅu r·ªông video
            height (int): Chi·ªÅu cao video
            duration (int): Th·ªùi l∆∞·ª£ng video (gi√¢y)
            disable_notification (bool): C√≥ t·∫Øt th√¥ng b√°o kh√¥ng
            progress_callback (function): Callback ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        if not os.path.exists(video_path) or not os.path.isfile(video_path):
            logger.error(f"File video kh√¥ng t·ªìn t·∫°i: {video_path}")
            return False
        
        # CH·∫∂N T·∫§T C·∫¢ C√ÅC VIDEO L·ªöN H∆†N 50MB N·∫æU use_telethon = TRUE
        try:
            video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
            video_name = os.path.basename(video_path)
            
            # Ki·ªÉm tra use_telethon t·ª´ c·∫•u h√¨nh
            import sys
            main_module = sys.modules['__main__']
            if hasattr(main_module, 'app'):
                app = main_module.app
                use_telethon = app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
                
                # In log ƒë·ªÉ ki·ªÉm tra
                logger.info(f"TELEGRAM_API: HARD CHECK use_telethon = {use_telethon}, video_size = {video_size_mb:.2f} MB")
                
                if use_telethon and video_size_mb > 50:
                    # N·∫øu use_telethon = true v√† video l·ªõn h∆°n 50MB, kh√¥ng chia nh·ªè
                    logger.error(f"TELEGRAM_API: use_telethon = true, video l·ªõn {video_size_mb:.2f} MB, kh√¥ng ƒë∆∞·ª£c chia nh·ªè")
                    from tkinter import messagebox
                    messagebox.showerror(
                        "L·ªói t·∫£i l√™n",
                        f"Video '{video_name}' c√≥ k√≠ch th∆∞·ªõc {video_size_mb:.2f} MB v∆∞·ª£t qu√° gi·ªõi h·∫°n 50MB c·ªßa Telegram Bot API.\n\n"
                        f"V√¨ b·∫°n ƒë√£ b·∫≠t 'S·ª≠ d·ª•ng Telethon API', ·ª©ng d·ª•ng s·∫Ω kh√¥ng chia nh·ªè video.\n"
                        f"Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng t·∫£i l√™n qua Telethon ho·∫∑c t·∫Øt t√πy ch·ªçn 'S·ª≠ d·ª•ng Telethon API'."
                    )
                    return False
        except Exception as e:
            logger.error(f"L·ªói khi ki·ªÉm tra use_telethon: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            
        try:
            # L·∫•y th√¥ng tin video
            video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
            video_name = os.path.basename(video_path)
            
            # Chu·∫©n b·ªã caption n·∫øu kh√¥ng cung c·∫•p
            if not caption:
                file_name = os.path.basename(video_path)
                caption = f"üìπ {file_name}\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh l√™n 10% (chu·∫©n b·ªã)
            if progress_callback:
                progress_callback(10)
                
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc ƒë·ªÉ quy·∫øt ƒë·ªãnh ph∆∞∆°ng ph√°p t·∫£i l√™n
            if video_size_mb <= 50:
                # T·∫£i l√™n tr·ª±c ti·∫øp cho video nh·ªè
                logger.info(f"Video nh·ªè h∆°n 50MB, t·∫£i l√™n tr·ª±c ti·∫øp: {video_name} ({video_size_mb:.2f} MB)")
                return self._send_video_direct(chat_id, video_path, caption, width, height, duration, disable_notification)
            else:
                # Video l·ªõn - ki·ªÉm tra l·∫°i use_telethon
                try:
                    import sys
                    main_module = sys.modules['__main__']
                    if hasattr(main_module, 'app'):
                        app = main_module.app
                        use_telethon = app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
                        
                        if use_telethon:
                            # Kh√¥ng chia nh·ªè n·∫øu use_telethon = true
                            logger.error(f"FINAL CHECK: use_telethon = true, kh√¥ng chia nh·ªè video l·ªõn {video_size_mb:.2f} MB")
                            from tkinter import messagebox
                            messagebox.showerror(
                                "L·ªói t·∫£i l√™n",
                                f"Video '{video_name}' c√≥ k√≠ch th∆∞·ªõc {video_size_mb:.2f} MB v∆∞·ª£t qu√° gi·ªõi h·∫°n 50MB.\n\n"
                                f"V√¨ b·∫°n ƒë√£ b·∫≠t 'S·ª≠ d·ª•ng Telethon API', ·ª©ng d·ª•ng s·∫Ω kh√¥ng chia nh·ªè video.\n"
                                f"Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng t·∫£i l√™n qua Telethon ho·∫∑c t·∫Øt t√πy ch·ªçn n√†y."
                            )
                            return False
                except Exception as e:
                    logger.error(f"L·ªói khi ki·ªÉm tra use_telethon l·∫ßn cu·ªëi: {str(e)}")
                
                # N·∫øu kh√¥ng b·∫≠t use_telethon, chia nh·ªè video
                logger.info(f"üîÑ ƒêang x·ª≠ l√Ω video l·ªõn: {video_name} ({video_size_mb:.2f} MB)")
                return self._send_video_split(chat_id, video_path, caption, disable_notification, progress_callback)
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i video {os.path.basename(video_path)}: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            return False
    def _send_video_direct(self, chat_id, video_path, caption=None, width=None, height=None, duration=None, disable_notification=False, retry_count=3):
        """
        G·ª≠i video tr·ª±c ti·∫øp ƒë·∫øn Telegram
        
        Args:
            chat_id (str/int): ID c·ªßa cu·ªôc tr√≤ chuy·ªán/k√™nh
            video_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video
            caption (str): Ch√∫ th√≠ch cho video
            width (int): Chi·ªÅu r·ªông video
            height (int): Chi·ªÅu cao video
            duration (int): Th·ªùi l∆∞·ª£ng video (gi√¢y)
            disable_notification (bool): C√≥ t·∫Øt th√¥ng b√°o kh√¥ng
            retry_count (int): S·ªë l·∫ßn th·ª≠ l·∫°i n·∫øu g·∫∑p l·ªói
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        if not self.connected or not self.bot:
            logger.error("Ch∆∞a k·∫øt n·ªëi v·ªõi Telegram API")
            return False
        
        if not os.path.exists(video_path) or not os.path.isfile(video_path):
            logger.error(f"File video kh√¥ng t·ªìn t·∫°i: {video_path}")
            return False
        
        # Retry mechanism
        attempt = 0
        while attempt < retry_count:
            try:
                # Open file in binary mode
                with open(video_path, 'rb') as video_file:
                    # Send video
                    message = self.bot.send_video(
                        chat_id=chat_id,
                        video=video_file,
                        caption=caption,
                        width=width,
                        height=height,
                        duration=duration,
                        disable_notification=disable_notification,
                        supports_streaming=True
                    )
                    
                    # Check if video was sent successfully
                    if message and message.video:
                        logger.info(f"‚úÖ ƒê√£ g·ª≠i video th√†nh c√¥ng: {os.path.basename(video_path)}")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è Video ƒë√£ ƒë∆∞·ª£c g·ª≠i nh∆∞ng kh√¥ng nh·∫≠n ƒë∆∞·ª£c x√°c nh·∫≠n: {os.path.basename(video_path)}")
                        return True  # Consider it successful if no error was thrown
            
            except apihelper.ApiTelegramException as e:
                if e.error_code == 413:  # Request Entity Too Large
                    logger.error(f"‚ùå Video qu√° l·ªõn cho Telegram Bot API: {os.path.basename(video_path)}")
                    return False  # No retry for this error
                    
                logger.warning(f"‚ö†Ô∏è L·ªói API Telegram (l·∫ßn {attempt+1}/{retry_count}): {str(e)}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è L·ªói khi g·ª≠i video (l·∫ßn {attempt+1}/{retry_count}): {str(e)}")
            
            # Retry after delay
            attempt += 1
            if attempt < retry_count:
                retry_delay = 5  # seconds
                logger.info(f"Th·ª≠ l·∫°i sau {retry_delay} gi√¢y...")
                time.sleep(retry_delay)
        
        logger.error(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i video sau {retry_count} l·∫ßn th·ª≠: {os.path.basename(video_path)}")
        return False
    
    def _send_video_split(self, chat_id, video_path, caption=None, disable_notification=False, progress_callback=None):
        """
        Chia nh·ªè video v√† g·ª≠i t·ª´ng ph·∫ßn
        
        Args:
            chat_id (str/int): ID c·ªßa cu·ªôc tr√≤ chuy·ªán/k√™nh
            video_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video
            caption (str): Ch√∫ th√≠ch cho video
            disable_notification (bool): C√≥ t·∫Øt th√¥ng b√°o kh√¥ng
            progress_callback (function): Callback ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh
            
        Returns:
            bool: True n·∫øu t·∫•t c·∫£ c√°c ph·∫ßn ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng
        """
        # KI·ªÇM TRA USE_TELETHON M·ªòT L·∫¶N N·ªÆA - ƒê·ªÇ TUY·ªÜT ƒê·ªêI ƒê·∫¢M B·∫¢O
        try:
            import sys
            main_module = sys.modules['__main__']
            if hasattr(main_module, 'app'):
                app = main_module.app
                use_telethon = app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
                
                if use_telethon:
                    # THAY ƒê·ªîI: Th√™m ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi th·ª±c t·∫ø
                    telethon_connected = False
                    try:
                        if hasattr(app.telethon_uploader, 'is_connected'):
                            telethon_connected = app.telethon_uploader.is_connected()
                            app.telethon_uploader.connected = telethon_connected
                    except Exception as e:
                        logger.error(f"L·ªói ki·ªÉm tra k·∫øt n·ªëi Telethon: {str(e)}")
                    
                    logger.error(f"SPLIT VIDEO: use_telethon = true, k·∫øt n·ªëi th·ª±c t·∫ø = {telethon_connected}")
                    video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
                    
                    # Th√¥ng b√°o kh√°c nhau t√πy thu·ªôc v√†o tr·∫°ng th√°i k·∫øt n·ªëi
                    from tkinter import messagebox
                    if telethon_connected:
                        messagebox.showerror(
                            "L·ªói t·∫£i l√™n",
                            f"Kh√¥ng th·ªÉ t·∫£i l√™n video '{os.path.basename(video_path)}' ({video_size_mb:.2f} MB) qua Telethon API m·∫∑c d√π ƒë√£ ƒëƒÉng nh·∫≠p.\n\n"
                            f"Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† th·ª≠ l·∫°i sau."
                        )
                    else:
                        messagebox.showerror(
                            "L·ªói t·∫£i l√™n",
                            f"Video '{os.path.basename(video_path)}' c√≥ k√≠ch th∆∞·ªõc {video_size_mb:.2f} MB v∆∞·ª£t qu√° gi·ªõi h·∫°n 50MB.\n\n"
                            f"B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p Telethon API ƒë·ªÉ t·∫£i l√™n video l·ªõn.\n\n"
                            f"Vui l√≤ng v√†o tab C√†i ƒë·∫∑t > Telethon API > Nh·∫•n n√∫t 'L·∫•y m√£ x√°c th·ª±c' v√† ho√†n th√†nh quy tr√¨nh x√°c th·ª±c."
                        )
                    return False
        except Exception as e:
            logger.error(f"L·ªói ki·ªÉm tra use_telethon trong _send_video_split: {str(e)}")
        
        # B√°o c√°o k√≠ch th∆∞·ªõc video
        video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
        logger.info(f"FORCE CHECK TELETHON: Video size = {video_size_mb:.2f} MB")
        
        # Ti·∫øp t·ª•c logic chia nh·ªè n·∫øu kh√¥ng b·∫≠t Telethon
        splitter = VideoSplitter()
        
        try:
            # Split the video into parts
            video_name = os.path.basename(video_path)
            video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
            logger.info(f"Video {video_name} ({video_size_mb:.2f} MB) s·∫Ω ƒë∆∞·ª£c g·ª≠i th√†nh nhi·ªÅu ph·∫ßn")
            
            # QUAN TR·ªåNG: Ch·ªâ truy·ªÅn m·ªôt tham s·ªë t·ªõi split_video
            video_parts = splitter.split_video(video_path)
            if not video_parts:
                logger.error(f"Kh√¥ng th·ªÉ chia nh·ªè video: {video_name}")
                return False
            
            
            # Send each part
            total_parts = len(video_parts)
            part_index = 0
            successful_parts = 0
            
            for part_path in video_parts:
                part_index += 1
                part_name = os.path.basename(part_path)
                
                # Generate part caption
                if caption:
                    part_caption = f"{caption}\n\nüìå Ph·∫ßn {part_index}/{total_parts}"
                else:
                    part_caption = f"üìπ {video_name} (Ph·∫ßn {part_index}/{total_parts})"
                
                # Calculate progress range for this part
                # Each part starts at 10% and goes to 90% spread across all parts
                progress_start = 10 + (part_index - 1) * 80 / total_parts
                progress_end = 10 + part_index * 80 / total_parts
                
                # Custom progress callback for this part
                if progress_callback:
                    part_progress_callback = lambda p: progress_callback(
                        int(progress_start + (progress_end - progress_start) * p / 100)
                    )
                else:
                    part_progress_callback = None
                
                # Send this part
                logger.info(f"üîÑ ƒêang g·ª≠i ph·∫ßn {part_index}/{total_parts}: {part_name}")
                
                # Make multiple attempts if needed
                max_attempts = 4
                for attempt in range(max_attempts):
                    try:
                        success = self._send_video_direct(
                            chat_id,
                            part_path,
                            part_caption,
                            disable_notification=disable_notification
                        )
                        
                        if success:
                            successful_parts += 1
                            # Update progress to end of this part
                            if progress_callback:
                                progress_callback(int(progress_end))
                            break
                        
                        if attempt < max_attempts - 1:
                            logger.warning(f"‚ö†Ô∏è L·ªói k·∫øt n·ªëi (l·∫ßn {attempt+1}/{max_attempts}), th·ª≠ l·∫°i sau 10 gi√¢y...")
                            time.sleep(10)  # Wait before retrying
                        else:
                            logger.error(f"‚ùå ƒê√£ th·ª≠ {max_attempts} l·∫ßn nh∆∞ng kh√¥ng th·ªÉ g·ª≠i ph·∫ßn {part_index}/{total_parts}")
                    
                    except Exception as e:
                        logger.error(f"L·ªói khi g·ª≠i ph·∫ßn {part_index}/{total_parts}: {str(e)}")
                        if attempt < max_attempts - 1:
                            logger.warning(f"‚ö†Ô∏è Th·ª≠ l·∫°i sau 10 gi√¢y...")
                            time.sleep(10)  # Wait before retrying
            
            # Clean up temporary files
            try:
                for part_path in video_parts:
                    if os.path.exists(part_path):
                        os.remove(part_path)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file t·∫°m th·ªùi: {str(e)}")
            
            # Check if all parts were sent successfully
            if successful_parts == total_parts:
                logger.info(f"‚úÖ ƒê√£ g·ª≠i th√†nh c√¥ng t·∫•t c·∫£ {total_parts} ph·∫ßn c·ªßa video {video_name}")
                # Set progress to 100%
                if progress_callback:
                    progress_callback(100)
                return True
            else:
                logger.error(f"‚ùå Ch·ªâ g·ª≠i ƒë∆∞·ª£c {successful_parts}/{total_parts} ph·∫ßn c·ªßa video {video_name}")
                return False
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i video theo t·ª´ng ph·∫ßn: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            return False        
    
    def delete_message(self, chat_id, message_id):
        """
        X√≥a tin nh·∫Øn kh·ªèi Telegram
        
        Args:
            chat_id (str/int): ID c·ªßa cu·ªôc tr√≤ chuy·ªán/k√™nh
            message_id (int): ID c·ªßa tin nh·∫Øn c·∫ßn x√≥a
            
        Returns:
            bool: True n·∫øu x√≥a th√†nh c√¥ng
        """
        if not self.connected or not self.bot:
            logger.error("Ch∆∞a k·∫øt n·ªëi v·ªõi Telegram API")
            return False
            
        try:
            result = self.bot.delete_message(chat_id, message_id)
            return result
        except Exception as e:
            logger.error(f"L·ªói khi x√≥a tin nh·∫Øn: {str(e)}")
            return False