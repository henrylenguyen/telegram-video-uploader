"""
Module qu·∫£n l√Ω t∆∞∆°ng t√°c v·ªõi Telegram API.
"""
import os
import time
import logging
import threading
import socket
import requests
from datetime import datetime
import telebot
from telebot.types import InputFile

# Nh·∫≠p module VideoSplitter ƒë·ªÉ x·ª≠ l√Ω file l·ªõn
try:
    from utils.video_splitter import VideoSplitter
except ImportError:
    from video_splitter import VideoSplitter

# C·∫•u h√¨nh logging
logger = logging.getLogger("TelegramAPI")

class TelegramAPI:
    """
    Qu·∫£n l√Ω t∆∞∆°ng t√°c v·ªõi Telegram API qua pyTelegramBotAPI.
    H·ªó tr·ª£ t·∫£i l√™n video kh√¥ng gi·ªõi h·∫°n k√≠ch th∆∞·ªõc b·∫±ng c√°ch chia nh·ªè.
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o TelegramAPI"""
        self.bot = None
        self.connected = False
        self.send_lock = threading.Lock()  # Lock ƒë·ªÉ ƒë·ªìng b·ªô h√≥a g·ª≠i tin nh·∫Øn
        self.bot_token = None
        self.video_splitter = VideoSplitter()
    
    def connect(self, bot_token):
        """
        K·∫øt n·ªëi v·ªõi bot Telegram
        
        Args:
            bot_token (str): Bot token t·ª´ BotFather
            
        Returns:
            bool: True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        """
        if self.connected and self.bot and self.bot_token == bot_token:
            return True
            
        try:
            # T·∫°o ƒë·ªëi t∆∞·ª£ng bot
            self.bot = telebot.TeleBot(bot_token)
            
            # Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch l·∫•y th√¥ng tin bot
            bot_info = self.bot.get_me()
            
            if bot_info:
                logger.info(f"ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi bot: @{bot_info.username}")
                self.connected = True
                self.bot_token = bot_token
                return True
            else:
                logger.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin bot")
                self.bot = None
                self.connected = False
                self.bot_token = None
                return False
                
        except Exception as e:
            logger.error(f"L·ªói khi k·∫øt n·ªëi v·ªõi Telegram API: {str(e)}")
            self.bot = None
            self.connected = False
            self.bot_token = None
            return False
    
    def disconnect(self):
        """
        Ng·∫Øt k·∫øt n·ªëi v·ªõi bot Telegram
        """
        self.bot = None
        self.connected = False
        self.bot_token = None
        logger.info("ƒê√£ ng·∫Øt k·∫øt n·ªëi v·ªõi Telegram API")
    
    def send_with_retry(self, send_func, max_retries=3, retry_delay=5):
        """
        Th·ª±c thi m·ªôt h√†m g·ª≠i v·ªõi c∆° ch·∫ø t·ª± ƒë·ªông th·ª≠ l·∫°i
        
        Args:
            send_func: H√†m g·ª≠i d·ªØ li·ªáu c·∫ßn th·ª±c thi
            max_retries (int): S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa
            retry_delay (int): Th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn th·ª≠ l·∫°i (gi√¢y)
            
        Returns:
            K·∫øt qu·∫£ t·ª´ h√†m g·ª≠i ho·∫∑c False n·∫øu t·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i
        """
        retries = 0
        last_error = None
        
        while retries <= max_retries:
            try:
                # Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc khi g·ª≠i
                if not self.connected or not self.bot:
                    # Th·ª≠ k·∫øt n·ªëi l·∫°i
                    if not self.connect(self.bot_token):
                        logger.error("M·∫•t k·∫øt n·ªëi v√† kh√¥ng th·ªÉ k·∫øt n·ªëi l·∫°i")
                        time.sleep(retry_delay)
                        retries += 1
                        continue
                
                # Th·ª±c thi h√†m g·ª≠i
                result = send_func()
                if result:
                    # Th√†nh c√¥ng
                    return result
                
                # N·∫øu g·ª≠i th·∫•t b·∫°i nh∆∞ng kh√¥ng c√≥ ngo·∫°i l·ªá
                retries += 1
                time.sleep(retry_delay)
                
            except telebot.apihelper.ApiTelegramException as e:
                # X·ª≠ l√Ω l·ªói API Telegram
                last_error = e
                logger.error(f"L·ªói API Telegram (l·∫ßn {retries+1}/{max_retries+1}): {e}")
                
                # X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
                if "Too Many Requests" in str(e) or "retry after" in str(e).lower():
                    # L·ªói rate limit, l·∫•y th·ªùi gian ch·ªù t·ª´ l·ªói
                    wait_time = 5  # M·∫∑c ƒë·ªãnh 5 gi√¢y
                    try:
                        # Th·ª≠ l·∫•y th·ªùi gian ch·ªù t·ª´ th√¥ng b√°o l·ªói
                        import re
                        match = re.search(r'retry after (\d+)', str(e).lower())
                        if match:
                            wait_time = int(match.group(1)) + 1
                    except:
                        pass
                    
                    logger.info(f"Rate limit v∆∞·ª£t qu√°, ƒë·ª£i {wait_time} gi√¢y")
                    time.sleep(wait_time)
                elif "Bad Request" in str(e) and "file is too big" in str(e).lower():
                    # L·ªói file qu√° l·ªõn, kh√¥ng th·ª≠ l·∫°i
                    logger.error("File qu√° l·ªõn cho Telegram Bot API (gi·ªõi h·∫°n 50MB)")
                    return False
                else:
                    # L·ªói kh√°c, ƒë·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i
                    time.sleep(retry_delay)
                
                retries += 1
            
            except (requests.exceptions.RequestException, requests.exceptions.Timeout) as e:
                # L·ªói k·∫øt n·ªëi ho·∫∑c timeout
                last_error = e
                logger.error(f"L·ªói k·∫øt n·ªëi (l·∫ßn {retries+1}/{max_retries+1}): {e}")
                
                # ƒê·ª£i l√¢u h∆°n cho l·ªói k·∫øt n·ªëi
                time.sleep(retry_delay * 2)
                retries += 1
            
            except Exception as e:
                # L·ªói kh√°c
                last_error = e
                logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh (l·∫ßn {retries+1}/{max_retries+1}): {e}")
                time.sleep(retry_delay)
                retries += 1
        
        # N·∫øu ƒë√£ th·ª≠ h·∫øt s·ªë l·∫ßn
        logger.error(f"ƒê√£ th·ª≠ {max_retries+1} l·∫ßn nh∆∞ng v·∫´n th·∫•t b·∫°i: {last_error}")
        return False
    
    def send_video(self, chat_id, video_path, caption=None):
        """
        G·ª≠i video ƒë·∫øn chat ID
        
        Args:
            chat_id (str/int): ID chat nh·∫≠n video
            video_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video
            caption (str, optional): Ch√∫ th√≠ch cho video
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        if not self.bot:
            logger.error("Ch∆∞a k·∫øt n·ªëi v·ªõi bot Telegram!")
            return False
            
        video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
        video_name = os.path.basename(video_path)
        
        # Ki·ªÉm tra n·∫øu Telethon ƒë∆∞·ª£c b·∫≠t v√† video l·ªõn h∆°n 50MB
        use_telethon = False
        try:
            from app import app
            if hasattr(app, "config"):
                use_telethon = app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
        except:
            # N·∫øu kh√¥ng th·ªÉ l·∫•y t·ª´ app, ki·ªÉm tra trong c·∫•u h√¨nh
            config = configparser.ConfigParser()
            config_file = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), 'config.ini')
            if os.path.exists(config_file):
                config.read(config_file)
                if 'TELETHON' in config:
                    use_telethon = config.getboolean('TELETHON', 'use_telethon', fallback=False)
        
        if use_telethon and video_size_mb > 50:
            # D√πng Telethon ƒë·ªÉ g·ª≠i video l·ªõn
            try:
                from utils.telethon_uploader import telethon_uploader
                logger.info(f"üîÑ S·ª≠ d·ª•ng Telethon API ƒë·ªÉ t·∫£i l√™n video l·ªõn: {video_name} ({video_size_mb:.2f} MB)")
                return telethon_uploader.send_video(chat_id, video_path, caption)
            except Exception as e:
                logger.error(f"L·ªói khi s·ª≠ d·ª•ng Telethon: {str(e)}")
                # N·∫øu Telethon th·∫•t b·∫°i, quay l·∫°i x·ª≠ l√Ω th√¥ng th∆∞·ªùng
                logger.warning("Quay l·∫°i ph∆∞∆°ng ph√°p t·∫£i l√™n th√¥ng th∆∞·ªùng")
        
        # Ph∆∞∆°ng ph√°p g·ª≠i th√¥ng th∆∞·ªùng s·ª≠ d·ª•ng Bot API
        logger.info(f"üîÑ ƒêang x·ª≠ l√Ω video l·ªõn: {video_name} ({video_size_mb:.2f} MB)")
        
        # N·∫øu video nh·ªè h∆°n 50MB, g·ª≠i tr·ª±c ti·∫øp
        if video_size_mb <= 50:
            return self._send_video_directly(chat_id, video_path, caption)
        
        # Chia nh·ªè video n·∫øu l·ªõn h∆°n 50MB
        from utils.video_splitter import VideoSplitter
        splitter = VideoSplitter()
        parts = splitter.split_video(video_path)
        
        if not parts:
            logger.error(f"Kh√¥ng th·ªÉ chia nh·ªè video: {video_name}")
            return False
        
        logger.info(f"Video {video_name} ({video_size_mb:.2f} MB) s·∫Ω ƒë∆∞·ª£c g·ª≠i th√†nh {len(parts)} ph·∫ßn")
        
        # G·ª≠i t·ª´ng ph·∫ßn
        total_parts = len(parts)
        for i, part in enumerate(parts, 1):
            part_caption = f"{caption or video_name} - Ph·∫ßn {i}/{total_parts}"
            success = self._send_video_directly(chat_id, part, part_caption)
            if not success:
                logger.error(f"L·ªói khi g·ª≠i ph·∫ßn {i}/{total_parts}")
                return False
            time.sleep(1)  # Ch·ªù gi·ªØa c√°c l·∫ßn g·ª≠i
        
        # X√≥a c√°c file t·∫°m
        for part in parts:
            try:
                os.remove(part)
            except:
                pass
        
        return True
    def _check_file_size(self, file_path):
        """
        Ki·ªÉm tra k√≠ch th∆∞·ªõc file v√† quy·∫øt ƒë·ªãnh c√°ch x·ª≠ l√Ω
        
        Args:
            file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file
            
        Returns:
            tuple: (mode, size_mb)
                mode: 'direct' n·∫øu < 50MB, 'split' n·∫øu c·∫ßn chia nh·ªè, 'compress' n·∫øu c·∫ßn n√©n
                size_mb: K√≠ch th∆∞·ªõc file t√≠nh b·∫±ng MB
        """
        if not os.path.exists(file_path) or not os.path.isfile(file_path):
            return None, 0
            
        # K√≠ch th∆∞·ªõc file t√≠nh b·∫±ng MB
        size_mb = os.path.getsize(file_path) / (1024 * 1024)
        
        if size_mb <= 49:  # Gi·ªõi h·∫°n an to√†n l√† 49MB
            return 'direct', size_mb
        else:
            # ∆Øu ti√™n chia nh·ªè tr∆∞·ªõc
            return 'split', size_mb
    
    def send_video(self, chat_id, video_path, caption=None, width=None, height=None, duration=None, disable_notification=False, progress_callback=None):
        """
        G·ª≠i file video, t·ª± ƒë·ªông x·ª≠ l√Ω video l·ªõn h∆°n 50MB
        
        Args:
            chat_id (str/int): ID c·ªßa cu·ªôc tr√≤ chuy·ªán/k√™nh
            video_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video
            caption (str): Ch√∫ th√≠ch cho video
            width (int): Chi·ªÅu r·ªông video
            height (int): Chi·ªÅu cao video
            duration (int): Th·ªùi l∆∞·ª£ng video (gi√¢y)
            disable_notification (bool): C√≥ t·∫Øt th√¥ng b√°o kh√¥ng
            progress_callback (function): Callback ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh (kh√¥ng b·∫Øt bu·ªôc)
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        if not self.connected or not self.bot:
            logger.error("Ch∆∞a k·∫øt n·ªëi v·ªõi Telegram API")
            return False
            
        if not os.path.exists(video_path) or not os.path.isfile(video_path):
            logger.error(f"File video kh√¥ng t·ªìn t·∫°i: {video_path}")
            return False
            
        try:
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            mode, file_size = self._check_file_size(video_path)
            
            # Chu·∫©n b·ªã caption n·∫øu kh√¥ng c√≥
            if not caption:
                file_name = os.path.basename(video_path)
                caption = f"üìπ {file_name}\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            # Update progress to 10% (preparing)
            if progress_callback:
                progress_callback(10)
            
            # X·ª≠ l√Ω theo ch·∫ø ƒë·ªô
            if mode == 'direct':
                # Update progress to 20% (starting direct upload)
                if progress_callback:
                    progress_callback(20)
                    
                # G·ª≠i tr·ª±c ti·∫øp n·∫øu k√≠ch th∆∞·ªõc cho ph√©p
                result = self._send_video_direct(chat_id, video_path, caption, width, height, duration, disable_notification)
                
                # Update progress to 100% if successful
                if result and progress_callback:
                    progress_callback(100)
                    
                return result
            elif mode == 'split':
                # X·ª≠ l√Ω video l·ªõn b·∫±ng c√°ch chia nh·ªè
                return self._send_video_split(chat_id, video_path, caption, disable_notification, progress_callback)
            else:
                logger.error(f"Ch·∫ø ƒë·ªô kh√¥ng h·ª£p l·ªá: {mode}")
                return False
                
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i video {os.path.basename(video_path)}: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            return False

    def _send_video_split(self, chat_id, video_path, caption, disable_notification=False, progress_callback=None):
        """
        G·ª≠i video l·ªõn b·∫±ng c√°ch chia nh·ªè
        
        Args:
            chat_id (str/int): ID chat
            video_path (str): ƒê∆∞·ªùng d·∫´n video
            caption (str): Ch√∫ th√≠ch
            disable_notification (bool): T·∫Øt th√¥ng b√°o
            progress_callback (function): Callback ƒë·ªÉ c·∫≠p nh·∫≠t ti·∫øn tr√¨nh (kh√¥ng b·∫Øt bu·ªôc)
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        try:
            # L·∫•y th√¥ng tin video g·ªëc
            file_name = os.path.basename(video_path)
            file_size = os.path.getsize(video_path) / (1024 * 1024)  # MB
            
            # Th√¥ng b√°o b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
            start_message = f"üîÑ ƒêang x·ª≠ l√Ω video l·ªõn: {file_name} ({file_size:.2f} MB)"
            logger.info(start_message)
            
            # Update progress to 15% (processing video)
            if progress_callback:
                progress_callback(15)
            
            # Chia nh·ªè video
            video_parts = self.video_splitter.split_video(video_path)
            
            # Update progress to 25% (splitting completed)
            if progress_callback:
                progress_callback(25)
            
            if not video_parts:
                # Th·ª≠ ph∆∞∆°ng ph√°p n√©n
                logger.info(f"Kh√¥ng th·ªÉ chia nh·ªè video, th·ª≠ ph∆∞∆°ng ph√°p n√©n...")
                
                # Update progress to 30% (trying compression)
                if progress_callback:
                    progress_callback(30)
                    
                compressed_video = self.video_splitter.compress_video(video_path)
                
                # Update progress to 50% (compression completed)
                if progress_callback:
                    progress_callback(50)
                    
                if compressed_video and os.path.exists(compressed_video):
                    # Ki·ªÉm tra k√≠ch th∆∞·ªõc sau khi n√©n
                    compressed_size = os.path.getsize(compressed_video) / (1024 * 1024)
                    
                    if compressed_size <= 49:
                        # N·∫øu ƒë√£ n√©n xu·ªëng d∆∞·ªõi 50MB, g·ª≠i b√¨nh th∆∞·ªùng
                        logger.info(f"Video ƒë√£ ƒë∆∞·ª£c n√©n: {file_name} ({file_size:.2f}MB ‚Üí {compressed_size:.2f}MB)")
                        
                        # Update progress to 60% (starting upload of compressed video)
                        if progress_callback:
                            progress_callback(60)
                            
                        result = self._send_video_direct(
                            chat_id,
                            compressed_video,
                            caption,
                            disable_notification=disable_notification
                        )
                        
                        # Update progress to 100% if successful
                        if result and progress_callback:
                            progress_callback(100)
                            
                        return result
                    else:
                        # N·∫øu v·∫´n l·ªõn h∆°n 50MB sau khi n√©n
                        logger.exception(f"‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω video: {file_name} (v·∫´n l·ªõn h∆°n 50MB sau khi n√©n)")
                        return False
                else:
                    # Kh√¥ng th·ªÉ n√©n
                    self.send_message(
                        chat_id,
                        f"‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω video: {file_name} (kh√¥ng th·ªÉ chia nh·ªè ho·∫∑c n√©n)"
                    )
                    return False
            
            # Th√¥ng b√°o s·ªë l∆∞·ª£ng ph·∫ßn
            part_message = f"Video {file_name} ({file_size:.2f} MB) s·∫Ω ƒë∆∞·ª£c g·ª≠i th√†nh {len(video_parts)} ph·∫ßn"
            logger.info(part_message)
            
            # G·ª≠i t·ª´ng ph·∫ßn
            total_parts = len(video_parts)
            for i, part_path in enumerate(video_parts):
                # Calculate progress (25% to 95%)
                if progress_callback:
                    percent = 25 + (i / total_parts) * 70
                    progress_callback(int(percent))
                    
                part_caption = f"{caption}\nPh·∫ßn {i+1}/{len(video_parts)}"
                
                # G·ª≠i ph·∫ßn video
                success = self._send_video_direct(
                    chat_id,
                    part_path,
                    part_caption,
                    disable_notification=disable_notification
                )
                
                if not success:
                    logger.error(f"L·ªói khi g·ª≠i ph·∫ßn {i+1}/{len(video_parts)} c·ªßa video {file_name}")
                    return False
                
                # Ch·ªù gi·ªØa c√°c l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh flood
                if i < len(video_parts) - 1:
                    time.sleep(2)
            
            # Th√¥ng b√°o ho√†n t·∫•t
            complete_message = f"‚úÖ ƒê√£ g·ª≠i xong video: {file_name} ({len(video_parts)} ph·∫ßn)"
            logger.info(complete_message)
            
            # Update progress to 100%
            if progress_callback:
                progress_callback(100)
                
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i video chia nh·ªè {os.path.basename(video_path)}: {str(e)}")
            import traceback
            logger.error(traceback.format_exc())
            
            return False
        
    def _send_video_direct(self, chat_id, video_path, caption, width=None, height=None, duration=None, disable_notification=False):
        """
        G·ª≠i video tr·ª±c ti·∫øp kh√¥ng qua x·ª≠ l√Ω, v·ªõi c∆° ch·∫ø t·ª± ƒë·ªông th·ª≠ l·∫°i
        
        Args:
            chat_id (str/int): ID chat
            video_path (str): ƒê∆∞·ªùng d·∫´n video
            caption (str): Ch√∫ th√≠ch
            width (int): Chi·ªÅu r·ªông
            height (int): Chi·ªÅu cao
            duration (int): Th·ªùi l∆∞·ª£ng
            disable_notification (bool): T·∫Øt th√¥ng b√°o
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        def _send():
            with self.send_lock:  # S·ª≠ d·ª•ng lock ƒë·ªÉ tr√°nh l·ªói flood control
                # M·ªü file video
                with open(video_path, 'rb') as video_file:
                    # G·ª≠i video
                    self.bot.send_video(
                        chat_id=chat_id,
                        video=video_file,
                        width=width,
                        height=height,
                        duration=duration,
                        disable_notification=disable_notification,
                        supports_streaming=True  # H·ªó tr·ª£ ph√°t tr·ª±c tuy·∫øn
                    )
            
            logger.info(f"ƒê√£ g·ª≠i video th√†nh c√¥ng: {os.path.basename(video_path)}")
            return True
        
        return self.send_with_retry(_send)
    

    def send_notification(self, notification_chat_id, text, disable_notification=False):
        """
        G·ª≠i th√¥ng b√°o ƒë·∫øn chat ID nh·∫≠n th√¥ng b√°o 
        
        Args:
            notification_chat_id (str/int): ID chat nh·∫≠n th√¥ng b√°o
            text (str): N·ªôi dung th√¥ng b√°o
            disable_notification (bool): C√≥ t·∫Øt th√¥ng b√°o kh√¥ng
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        # Kh√¥ng g·ª≠i th√¥ng b√°o theo y√™u c·∫ßu, ch·ªâ ghi log
        logger.info(f"Th√¥ng b√°o (kh√¥ng g·ª≠i): {text}")
        return True
    
    def test_connection(self, bot_token, chat_id):
        """
        Ki·ªÉm tra k·∫øt n·ªëi v√† quy·ªÅn g·ª≠i tin nh·∫Øn
        
        Args:
            bot_token (str): Bot token c·∫ßn ki·ªÉm tra
            chat_id (str/int): Chat ID c·∫ßn ki·ªÉm tra quy·ªÅn
            
        Returns:
            tuple: (success, message) - success l√† bool, message l√† th√¥ng b√°o k·∫øt qu·∫£
        """
        try:
            # K·∫øt n·ªëi v·ªõi token m·ªõi
            test_bot = telebot.TeleBot(bot_token)
            
            # L·∫•y th√¥ng tin bot
            bot_info = test_bot.get_me()
            if not bot_info:
                return False, "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin bot. Vui l√≤ng ki·ªÉm tra Bot Token."
                
            # Ki·ªÉm tra quy·ªÅn g·ª≠i tin nh·∫Øn
            if chat_id:
                test_message = f"üîÑ Ki·ªÉm tra k·∫øt n·ªëi t·ª´ Telegram Video Uploader\n‚è±Ô∏è {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                test_bot.send_message(chat_id, test_message)
                
            return True, f"K·∫øt n·ªëi th√†nh c√¥ng v·ªõi bot @{bot_info.username}"
            
        except telebot.apihelper.ApiException as e:
            if "Forbidden" in str(e):
                return False, "Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn ƒë·∫øn chat ID n√†y. Vui l√≤ng ki·ªÉm tra quy·ªÅn c·ªßa bot."
            elif "Bad Request" in str(e) and "chat not found" in str(e).lower():
                return False, "Chat ID kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i."
            else:
                return False, f"L·ªói API Telegram: {str(e)}"
        except Exception as e:
            return False, f"L·ªói khi ki·ªÉm tra k·∫øt n·ªëi: {str(e)}"
    
    def check_internet_connection(self):
        """
        Ki·ªÉm tra k·∫øt n·ªëi internet
        
        Returns:
            bool: True n·∫øu c√≥ k·∫øt n·ªëi internet
        """
        try:
            # Th·ª≠ k·∫øt n·ªëi ƒë·∫øn Google DNS
            socket.create_connection(("8.8.8.8", 53), timeout=3)
            return True
        except OSError:
            pass
        
        try:
            # Th·ª≠ k·∫øt n·ªëi ƒë·∫øn Telegram API
            socket.create_connection(("api.telegram.org", 443), timeout=3)
            return True
        except OSError:
            pass
        
        return False

if __name__ == "__main__":
    # M√£ ki·ªÉm th·ª≠
    logging.basicConfig(level=logging.DEBUG)
    
    api = TelegramAPI()
    
    # Thay th·∫ø v·ªõi bot token v√† chat ID th·∫≠t
    BOT_TOKEN = "YOUR_BOT_TOKEN"
    CHAT_ID = "YOUR_CHAT_ID"
    
    if api.connect(BOT_TOKEN):
        print("K·∫øt n·ªëi th√†nh c√¥ng")
        
        # Th·ª≠ nghi·ªám g·ª≠i video l·ªõn
        # api.send_video(CHAT_ID, "/path/to/large/video.mp4")
        
        # G·ª≠i tin nh·∫Øn ki·ªÉm tra
        if api.send_message(CHAT_ID, "Tin nh·∫Øn ki·ªÉm tra t·ª´ TelegramAPI"):
            print("ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng")
        else:
            print("G·ª≠i tin nh·∫Øn th·∫•t b·∫°i")
            
        api.disconnect()
    else:
        print("K·∫øt n·ªëi th·∫•t b·∫°i")