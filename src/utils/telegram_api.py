"""
Module qu·∫£n l√Ω t∆∞∆°ng t√°c v·ªõi Telegram API.
"""
import os
import time
import logging
import threading
from datetime import datetime
import telebot
from telebot.types import InputFile

# C·∫•u h√¨nh logging
logger = logging.getLogger("TelegramAPI")

class TelegramAPI:
    """
    Qu·∫£n l√Ω t∆∞∆°ng t√°c v·ªõi Telegram API qua pyTelegramBotAPI.
    """
    
    def __init__(self):
        """Kh·ªüi t·∫°o TelegramAPI"""
        self.bot = None
        self.connected = False
        self.send_lock = threading.Lock()  # Lock ƒë·ªÉ ƒë·ªìng b·ªô h√≥a g·ª≠i tin nh·∫Øn
    
    def connect(self, bot_token):
        """
        K·∫øt n·ªëi v·ªõi bot Telegram
        
        Args:
            bot_token (str): Bot token t·ª´ BotFather
            
        Returns:
            bool: True n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        """
        if self.connected and self.bot:
            return True
            
        try:
            # T·∫°o ƒë·ªëi t∆∞·ª£ng bot
            self.bot = telebot.TeleBot(bot_token)
            
            # Ki·ªÉm tra k·∫øt n·ªëi b·∫±ng c√°ch l·∫•y th√¥ng tin bot
            bot_info = self.bot.get_me()
            
            if bot_info:
                logger.info(f"ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng v·ªõi bot: @{bot_info.username}")
                self.connected = True
                return True
            else:
                logger.error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin bot")
                self.bot = None
                self.connected = False
                return False
                
        except Exception as e:
            logger.error(f"L·ªói khi k·∫øt n·ªëi v·ªõi Telegram API: {str(e)}")
            self.bot = None
            self.connected = False
            return False
    
    def disconnect(self):
        """
        Ng·∫Øt k·∫øt n·ªëi v·ªõi bot Telegram
        """
        self.bot = None
        self.connected = False
        logger.info("ƒê√£ ng·∫Øt k·∫øt n·ªëi v·ªõi Telegram API")
    
    def send_message(self, chat_id, text, disable_notification=False):
        """
        G·ª≠i tin nh·∫Øn vƒÉn b·∫£n
        
        Args:
            chat_id (str/int): ID c·ªßa cu·ªôc tr√≤ chuy·ªán/k√™nh
            text (str): N·ªôi dung tin nh·∫Øn
            disable_notification (bool): C√≥ t·∫Øt th√¥ng b√°o kh√¥ng
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        if not self.connected or not self.bot:
            logger.error("Ch∆∞a k·∫øt n·ªëi v·ªõi Telegram API")
            return False
            
        try:
            with self.send_lock:  # S·ª≠ d·ª•ng lock ƒë·ªÉ tr√°nh l·ªói flood control
                self.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode='HTML',
                    disable_notification=disable_notification
                )
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i tin nh·∫Øn: {str(e)}")
            return False
    
    def send_video(self, chat_id, video_path, caption=None, width=None, height=None, duration=None, disable_notification=False):
        """
        G·ª≠i file video
        
        Args:
            chat_id (str/int): ID c·ªßa cu·ªôc tr√≤ chuy·ªán/k√™nh
            video_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file video
            caption (str): Ch√∫ th√≠ch cho video
            width (int): Chi·ªÅu r·ªông video
            height (int): Chi·ªÅu cao video
            duration (int): Th·ªùi l∆∞·ª£ng video (gi√¢y)
            disable_notification (bool): C√≥ t·∫Øt th√¥ng b√°o kh√¥ng
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        if not self.connected or not self.bot:
            logger.error("Ch∆∞a k·∫øt n·ªëi v·ªõi Telegram API")
            return False
            
        if not os.path.exists(video_path) or not os.path.isfile(video_path):
            logger.error(f"File video kh√¥ng t·ªìn t·∫°i: {video_path}")
            return False
            
        try:
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
            file_size = os.path.getsize(video_path) / (1024 * 1024)  # MB
            
            if file_size > 50:
                logger.error(f"File video qu√° l·ªõn ({file_size:.2f} MB > 50 MB)")
                return False
                
            # Chu·∫©n b·ªã caption n·∫øu kh√¥ng c√≥
            if not caption:
                file_name = os.path.basename(video_path)
                caption = f"üìπ {file_name}\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                
            with self.send_lock:  # S·ª≠ d·ª•ng lock ƒë·ªÉ tr√°nh l·ªói flood control
                # M·ªü file video
                with open(video_path, 'rb') as video_file:
                    # G·ª≠i video
                    self.bot.send_video(
                        chat_id=chat_id,
                        video=video_file,
                        caption=caption,
                        width=width,
                        height=height,
                        duration=duration,
                        disable_notification=disable_notification,
                        supports_streaming=True  # H·ªó tr·ª£ ph√°t tr·ª±c tuy·∫øn
                    )
                    
            logger.info(f"ƒê√£ g·ª≠i video th√†nh c√¥ng: {os.path.basename(video_path)}")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi g·ª≠i video {os.path.basename(video_path)}: {str(e)}")
            return False
    
    def send_notification(self, notification_chat_id, text, disable_notification=False):
        """
        G·ª≠i th√¥ng b√°o ƒë·∫øn chat ID nh·∫≠n th√¥ng b√°o
        
        Args:
            notification_chat_id (str/int): ID chat nh·∫≠n th√¥ng b√°o
            text (str): N·ªôi dung th√¥ng b√°o
            disable_notification (bool): C√≥ t·∫Øt th√¥ng b√°o kh√¥ng
            
        Returns:
            bool: True n·∫øu g·ª≠i th√†nh c√¥ng
        """
        if not notification_chat_id:
            return False
            
        return self.send_message(notification_chat_id, text, disable_notification)
    
    def test_connection(self, bot_token, chat_id):
        """
        Ki·ªÉm tra k·∫øt n·ªëi v√† quy·ªÅn g·ª≠i tin nh·∫Øn
        
        Args:
            bot_token (str): Bot token c·∫ßn ki·ªÉm tra
            chat_id (str/int): Chat ID c·∫ßn ki·ªÉm tra quy·ªÅn
            
        Returns:
            tuple: (success, message) - success l√† bool, message l√† th√¥ng b√°o k·∫øt qu·∫£
        """
        try:
            # K·∫øt n·ªëi v·ªõi token m·ªõi
            test_bot = telebot.TeleBot(bot_token)
            
            # L·∫•y th√¥ng tin bot
            bot_info = test_bot.get_me()
            if not bot_info:
                return False, "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin bot. Vui l√≤ng ki·ªÉm tra Bot Token."
                
            # Ki·ªÉm tra quy·ªÅn g·ª≠i tin nh·∫Øn
            if chat_id:
                test_message = f"üîÑ Ki·ªÉm tra k·∫øt n·ªëi t·ª´ Telegram Video Uploader\n‚è±Ô∏è {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                test_bot.send_message(chat_id, test_message)
                
            return True, f"K·∫øt n·ªëi th√†nh c√¥ng v·ªõi bot @{bot_info.username}"
            
        except telebot.apihelper.ApiException as e:
            if "Forbidden" in str(e):
                return False, "Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i tin nh·∫Øn ƒë·∫øn chat ID n√†y. Vui l√≤ng ki·ªÉm tra quy·ªÅn c·ªßa bot."
            elif "Bad Request" in str(e) and "chat not found" in str(e).lower():
                return False, "Chat ID kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i."
            else:
                return False, f"L·ªói API Telegram: {str(e)}"
        except Exception as e:
            return False, f"L·ªói khi ki·ªÉm tra k·∫øt n·ªëi: {str(e)}"

if __name__ == "__main__":
    # M√£ ki·ªÉm th·ª≠
    logging.basicConfig(level=logging.DEBUG)
    
    api = TelegramAPI()
    
    # Thay th·∫ø v·ªõi bot token v√† chat ID th·∫≠t
    BOT_TOKEN = "YOUR_BOT_TOKEN"
    CHAT_ID = "YOUR_CHAT_ID"
    
    if api.connect(BOT_TOKEN):
        print("K·∫øt n·ªëi th√†nh c√¥ng")
        
        # G·ª≠i tin nh·∫Øn ki·ªÉm tra
        if api.send_message(CHAT_ID, "Tin nh·∫Øn ki·ªÉm tra t·ª´ TelegramAPI"):
            print("ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng")
        else:
            print("G·ª≠i tin nh·∫Øn th·∫•t b·∫°i")
            
        api.disconnect()
    else:
        print("K·∫øt n·ªëi th·∫•t b·∫°i")