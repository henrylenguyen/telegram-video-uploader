"""
Module for patching VideoSplitter ƒë·ªÉ ngƒÉn ch·∫∑n vi·ªác chia nh·ªè video khi use_telethon=True
"""

import os
import logging
import tkinter.messagebox as messagebox
from functools import wraps

logger = logging.getLogger("TelethonPatch")

def apply_patches():
    """√Åp d·ª•ng t·∫•t c·∫£ c√°c patch c·∫ßn thi·∫øt"""
    logger.info("ƒêang √°p d·ª•ng TelethonPatch ƒë·ªÉ ngƒÉn ch·∫∑n vi·ªác chia nh·ªè video khi use_telethon=True")
    
    try:
        # Import VideoSplitter
        from utils.video_splitter import VideoSplitter
        
        # L∆∞u ph∆∞∆°ng th·ª©c g·ªëc
        original_split_video = VideoSplitter.split_video
        
        @wraps(original_split_video)
        def patched_split_video(self, *args, **kwargs):
            """Phi√™n b·∫£n patched c·ªßa split_video ƒë·ªÉ ch·∫∑n vi·ªác chia nh·ªè khi use_telethon=True"""
            logger.info("üîç TelethonPatch: Ki·ªÉm tra tr∆∞·ªõc khi chia nh·ªè video")
            
            # Ki·ªÉm tra video path t·ª´ tham s·ªë
            video_path = args[0] if args else kwargs.get('video_path')
            if not video_path:
                logger.error("‚ùå TelethonPatch: Kh√¥ng t√¨m th·∫•y video_path trong tham s·ªë")
                return original_split_video(self, *args, **kwargs)
                
            # L·∫•y k√≠ch th∆∞·ªõc video
            try:
                video_size_mb = os.path.getsize(video_path) / (1024 * 1024)
                video_name = os.path.basename(video_path)
                logger.info(f"üîç TelethonPatch: Video {video_name} ({video_size_mb:.2f} MB)")
            except Exception as e:
                logger.error(f"‚ùå TelethonPatch: L·ªói khi l·∫•y k√≠ch th∆∞·ªõc video: {str(e)}")
                return original_split_video(self, *args, **kwargs)
            
            # Ki·ªÉm tra use_telethon t·ª´ c·∫•u h√¨nh
            try:
                import sys
                main_module = sys.modules['__main__']
                use_telethon = False
                
                if hasattr(main_module, 'app') and hasattr(main_module.app, 'config'):
                    use_telethon = main_module.app.config.getboolean('TELETHON', 'use_telethon', fallback=False)
                    logger.info(f"üîç TelethonPatch: Ki·ªÉm tra t·ª´ app.config: use_telethon = {use_telethon}")
                
                # Ki·ªÉm tra n·∫øu kh√¥ng th·ªÉ l·∫•y t·ª´ main_module.app
                if not use_telethon:
                    # Th·ª≠ l·∫•y t·ª´ c√°c v·ªã tr√≠ kh√°c
                    try:
                        from configparser import ConfigParser
                        config = ConfigParser()
                        config_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), 'config.ini')
                        if os.path.exists(config_path):
                            config.read(config_path)
                            if 'TELETHON' in config and 'use_telethon' in config['TELETHON']:
                                use_telethon = config['TELETHON'].getboolean('use_telethon', fallback=False)
                                logger.info(f"üîç TelethonPatch: Ki·ªÉm tra t·ª´ file config.ini: use_telethon = {use_telethon}")
                    except Exception as e:
                        logger.error(f"‚ùå TelethonPatch: L·ªói khi ƒë·ªçc config.ini: {str(e)}")
                
                # BLOCK VI·ªÜC CHIA NH·ªé VIDEO KHI use_telethon=True v√† video l·ªõn h∆°n 50MB
                if use_telethon and video_size_mb > 50:
                    logger.warning(f"‚õî TelethonPatch: CH·∫∂N CHIA NH·ªé VIDEO {video_name} ({video_size_mb:.2f} MB) v√¨ use_telethon=True")
                    
                    # Hi·ªÉn th·ªã th√¥ng b√°o
                    messagebox.showerror(
                        "L·ªói - Kh√¥ng th·ªÉ chia nh·ªè video", 
                        f"Video '{video_name}' ({video_size_mb:.2f} MB) kh√¥ng th·ªÉ ƒë∆∞·ª£c chia nh·ªè khi b·∫≠t t√πy ch·ªçn 'S·ª≠ d·ª•ng Telethon API'.\n\n"
                        f"Vui l√≤ng ƒë·∫£m b·∫£o ƒë√£ ƒëƒÉng nh·∫≠p Telethon API trong tab C√†i ƒë·∫∑t, ho·∫∑c t·∫Øt t√πy ch·ªçn 'S·ª≠ d·ª•ng Telethon API'."
                    )
                    
                    # Tr·∫£ v·ªÅ danh s√°ch tr·ªëng ƒë·ªÉ ch·ªâ ra r·∫±ng kh√¥ng chia nh·ªè th√†nh c√¥ng
                    return []
            except Exception as e:
                logger.error(f"‚ùå TelethonPatch: L·ªói khi ki·ªÉm tra use_telethon: {str(e)}")
                import traceback
                logger.error(traceback.format_exc())
            
            # N·∫øu kh√¥ng ph·∫£i block, th·ª±c hi·ªán ph∆∞∆°ng th·ª©c g·ªëc
            logger.info("‚úÖ TelethonPatch: Cho ph√©p chia nh·ªè video")
            return original_split_video(self, *args, **kwargs)
        
        # Thay th·∫ø ph∆∞∆°ng th·ª©c g·ªëc b·∫±ng phi√™n b·∫£n patched
        VideoSplitter.split_video = patched_split_video
        logger.info("‚úÖ TelethonPatch: ƒê√£ √°p d·ª•ng patch cho VideoSplitter.split_video")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå TelethonPatch: L·ªói khi √°p d·ª•ng patch: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return False